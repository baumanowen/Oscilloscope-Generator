
The_Test_bech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08004dd8  08004dd8  00005dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f8  080051f8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051f8  080051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005200  08005200  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005200  08005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005204  08005204  00006204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005208  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08005264  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005264  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf34  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b79  00000000  00000000  00013fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00015b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  000167e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001784b  00000000  00000000  000171d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e316  00000000  00000000  0002ea22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c1a  00000000  00000000  0003cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  000d6998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000da5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dc0 	.word	0x08004dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004dc0 	.word	0x08004dc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <generate_sine_table>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SINE_SAMPLE 80
uint16_t sine_table[SINE_SAMPLE];

void generate_sine_table(uint16_t amplitude, uint16_t offset) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	80fb      	strh	r3, [r7, #6]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80bb      	strh	r3, [r7, #4]
	for (int i = 0; i< SINE_SAMPLE; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e030      	b.n	8000624 <generate_sine_table+0x78>
		float sine_angle = (2.0f * 3.1415f *i)/ SINE_SAMPLE;
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005cc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000634 <generate_sine_table+0x88>
 80005d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005d4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000638 <generate_sine_table+0x8c>
 80005d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005dc:	edc7 7a04 	vstr	s15, [r7, #16]
		float value = sinf(sine_angle);
 80005e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80005e4:	f003 febc 	bl	8004360 <sinf>
 80005e8:	ed87 0a03 	vstr	s0, [r7, #12]
		sine_table[i]= (uint16_t)(amplitude * value + offset);
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	ee07 3a90 	vmov	s15, r3
 8000604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
 8000614:	b299      	uxth	r1, r3
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <generate_sine_table+0x90>)
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i< SINE_SAMPLE; i++) {
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	2b4f      	cmp	r3, #79	@ 0x4f
 8000628:	ddcb      	ble.n	80005c2 <generate_sine_table+0x16>
	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40c90e56 	.word	0x40c90e56
 8000638:	42a00000 	.word	0x42a00000
 800063c:	20000150 	.word	0x20000150

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc0b 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f85b 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f9e1 	bl	8000a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f9b5 	bl	80009c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8c1 	bl	80007dc <MX_ADC1_Init>
  MX_TIM1_Init();
 800065a:	f000 f911 	bl	8000880 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  char msg[10];
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	4822      	ldr	r0, [pc, #136]	@ (80006ec <main+0xac>)
 8000662:	f002 f805 	bl	8002670 <HAL_TIM_PWM_Start>
    generate_sine_table(1500, 1500); // amplitude 500, offset 500 — range 0–1000
 8000666:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800066a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800066e:	f7ff ff9d 	bl	80005ac <generate_sine_table>

    int index = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sine_table[index]);
 8000676:	4a1e      	ldr	r2, [pc, #120]	@ (80006f0 <main+0xb0>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800067e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <main+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
	    index = (index + 1) % SINE_SAMPLE;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <main+0xb4>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1159      	asrs	r1, r3, #5
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1ac9      	subs	r1, r1, r3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]

	    HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fc4f 	bl	8000f44 <HAL_Delay>

	    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 80006a6:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <main+0xb8>)
 80006a8:	f000 fcb4 	bl	8001014 <HAL_ADC_Start>

	      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80006ac:	210a      	movs	r1, #10
 80006ae:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <main+0xb8>)
 80006b0:	f000 fd64 	bl	800117c <HAL_ADC_PollForConversion>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d113      	bne.n	80006e2 <main+0xa2>
	      {
	        uint16_t adc_val = HAL_ADC_GetValue(&hadc1);  // Read ADC value (0–4095)
 80006ba:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <main+0xb8>)
 80006bc:	f000 fde9 	bl	8001292 <HAL_ADC_GetValue>
 80006c0:	4603      	mov	r3, r0
 80006c2:	827b      	strh	r3, [r7, #18]

	        int len = sprintf(msg, "%u\n", adc_val);  // Convert to string with newline
 80006c4:	8a7a      	ldrh	r2, [r7, #18]
 80006c6:	463b      	mov	r3, r7
 80006c8:	490c      	ldr	r1, [pc, #48]	@ (80006fc <main+0xbc>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f9a8 	bl	8003a20 <siprintf>
 80006d0:	60f8      	str	r0, [r7, #12]

	        HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);  // Send over USB serial
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4639      	mov	r1, r7
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <main+0xc0>)
 80006de:	f002 fde3 	bl	80032a8 <HAL_UART_Transmit>
	      }

	      HAL_Delay(5);  // ~200 Hz sampling rate
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 fc2e 	bl	8000f44 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sine_table[index]);
 80006e8:	e7c5      	b.n	8000676 <main+0x36>
 80006ea:	bf00      	nop
 80006ec:	200000c0 	.word	0x200000c0
 80006f0:	20000150 	.word	0x20000150
 80006f4:	66666667 	.word	0x66666667
 80006f8:	20000078 	.word	0x20000078
 80006fc:	08004dd8 	.word	0x08004dd8
 8000700:	20000108 	.word	0x20000108

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f9a6 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000782:	2304      	movs	r3, #4
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa2e 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079a:	f000 f9a9 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fc90 	bl	80020e0 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c6:	f000 f993 	bl	8000af0 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_ADC1_Init+0x98>)
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <MX_ADC1_Init+0x9c>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_ADC1_Init+0x98>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_ADC1_Init+0x98>)
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <MX_ADC1_Init+0xa0>)
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_ADC1_Init+0x98>)
 800083e:	f000 fba5 	bl	8000f8c <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 f952 	bl	8000af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_ADC1_Init+0x98>)
 800085e:	f000 fd25 	bl	80012ac <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000868:	f000 f942 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000078 	.word	0x20000078
 8000878:	40012000 	.word	0x40012000
 800087c:	0f000001 	.word	0x0f000001

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	@ 0x58
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f8d3 	bl	8003a64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008be:	4b3e      	ldr	r3, [pc, #248]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008c0:	4a3e      	ldr	r2, [pc, #248]	@ (80009bc <MX_TIM1_Init+0x13c>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 80008d0:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008d2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b37      	ldr	r3, [pc, #220]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008de:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ea:	4833      	ldr	r0, [pc, #204]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80008ec:	f001 fe18 	bl	8002520 <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008f6:	f000 f8fb 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000900:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000904:	4619      	mov	r1, r3
 8000906:	482c      	ldr	r0, [pc, #176]	@ (80009b8 <MX_TIM1_Init+0x138>)
 8000908:	f002 f824 	bl	8002954 <HAL_TIM_ConfigClockSource>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000912:	f000 f8ed 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000916:	4828      	ldr	r0, [pc, #160]	@ (80009b8 <MX_TIM1_Init+0x138>)
 8000918:	f001 fe51 	bl	80025be <HAL_TIM_PWM_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000922:	f000 f8e5 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4820      	ldr	r0, [pc, #128]	@ (80009b8 <MX_TIM1_Init+0x138>)
 8000936:	f002 fba7 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000940:	f000 f8d6 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000944:	2360      	movs	r3, #96	@ 0x60
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM1_Init+0x138>)
 800096a:	f001 ff31 	bl	80027d0 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000974:	f000 f8bc 	bl	8000af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <MX_TIM1_Init+0x138>)
 800099c:	f002 fbe2 	bl	8003164 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80009a6:	f000 f8a3 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009aa:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <MX_TIM1_Init+0x138>)
 80009ac:	f000 f934 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 80009b0:	bf00      	nop
 80009b2:	3758      	adds	r7, #88	@ 0x58
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	40010000 	.word	0x40010000

080009c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_USART2_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART2_UART_Init+0x4c>)
 80009f8:	f002 fc06 	bl	8003208 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 f875 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000108 	.word	0x20000108
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4812      	ldr	r0, [pc, #72]	@ (8000ae8 <MX_GPIO_Init+0xd4>)
 8000aa0:	f001 f88c 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aaa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_GPIO_Init+0xd8>)
 8000abc:	f000 fefa 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_GPIO_Init+0xd4>)
 8000ad8:	f000 feec 	bl	80018b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020800 	.word	0x40020800

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_ADC_MspInit+0x7c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d127      	bne.n	8000bbe <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_ADC_MspInit+0x80>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_ADC_MspInit+0x84>)
 8000bba:	f000 fe7b 	bl	80018b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <HAL_TIM_Base_MspInit+0x3c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10d      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_TIM_Base_MspInit+0x40>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <HAL_TIM_Base_MspInit+0x40>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_TIM_Base_MspInit+0x40>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40010000 	.word	0x40010000
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <HAL_TIM_MspPostInit+0x68>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11e      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_TIM_MspPostInit+0x6c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <HAL_TIM_MspPostInit+0x6c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_TIM_MspPostInit+0x6c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_TIM_MspPostInit+0x70>)
 8000c74:	f000 fe1e 	bl	80018b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	@ (8000d10 <HAL_UART_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x8c>)
 8000d02:	f000 fdd7 	bl	80018b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d72:	f000 f8c7 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f002 fe62 	bl	8003a74 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20018000 	.word	0x20018000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200001f0 	.word	0x200001f0
 8000de4:	20000340 	.word	0x20000340

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f002 fe21 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fbff 	bl	8000640 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e50:	08005208 	.word	0x08005208
  ldr r2, =_sbss
 8000e54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e58:	20000340 	.word	0x20000340

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 fcdf 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe32 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fce9 	bl	800189a <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 fcbf 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200001f4 	.word	0x200001f4

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001f4 	.word	0x200001f4

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e033      	b.n	800100a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d109      	bne.n	8000fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fdce 	bl	8000b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd2:	f023 0302 	bic.w	r3, r3, #2
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fa86 	bl	80014f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f023 0303 	bic.w	r3, r3, #3
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_ADC_Start+0x1a>
 800102a:	2302      	movs	r3, #2
 800102c:	e097      	b.n	800115e <HAL_ADC_Start+0x14a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d018      	beq.n	8001076 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001054:	4b45      	ldr	r3, [pc, #276]	@ (800116c <HAL_ADC_Start+0x158>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a45      	ldr	r2, [pc, #276]	@ (8001170 <HAL_ADC_Start+0x15c>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9a      	lsrs	r2, r3, #18
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001068:	e002      	b.n	8001070 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3b01      	subs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d15f      	bne.n	8001144 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010c2:	d106      	bne.n	80010d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	f023 0206 	bic.w	r2, r3, #6
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_ADC_Start+0x160>)
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010ec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10f      	bne.n	800111a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d129      	bne.n	800115c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e020      	b.n	800115c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a16      	ldr	r2, [pc, #88]	@ (8001178 <HAL_ADC_Start+0x164>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d11b      	bne.n	800115c <HAL_ADC_Start+0x148>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d114      	bne.n	800115c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	e00b      	b.n	800115c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	f043 0210 	orr.w	r2, r3, #16
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	40012300 	.word	0x40012300
 8001178:	40012000 	.word	0x40012000

0800117c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001198:	d113      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a8:	d10b      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f043 0220 	orr.w	r2, r3, #32
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e063      	b.n	800128a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c2:	f7ff feb3 	bl	8000f2c <HAL_GetTick>
 80011c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011c8:	e021      	b.n	800120e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d01d      	beq.n	800120e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_PollForConversion+0x6c>
 80011d8:	f7ff fea8 	bl	8000f2c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d212      	bcs.n	800120e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d00b      	beq.n	800120e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f043 0204 	orr.w	r2, r3, #4
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e03d      	b.n	800128a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b02      	cmp	r3, #2
 800121a:	d1d6      	bne.n	80011ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f06f 0212 	mvn.w	r2, #18
 8001224:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d123      	bne.n	8001288 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001244:	2b00      	cmp	r3, #0
 8001246:	d11f      	bne.n	8001288 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001260:	2b00      	cmp	r3, #0
 8001262:	d111      	bne.n	8001288 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e105      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x228>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d925      	bls.n	8001324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68d9      	ldr	r1, [r3, #12]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	3b1e      	subs	r3, #30
 80012ee:	2207      	movs	r2, #7
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	4603      	mov	r3, r0
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4403      	add	r3, r0
 8001316:	3b1e      	subs	r3, #30
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	e022      	b.n	800136a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	2207      	movs	r2, #7
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6919      	ldr	r1, [r3, #16]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	409a      	lsls	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b06      	cmp	r3, #6
 8001370:	d824      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b05      	subs	r3, #5
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ba:	e04c      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d824      	bhi.n	800140e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b23      	subs	r3, #35	@ 0x23
 80013d6:	221f      	movs	r2, #31
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43da      	mvns	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	400a      	ands	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	@ 0x23
 8001400:	fa00 f203 	lsl.w	r2, r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	631a      	str	r2, [r3, #48]	@ 0x30
 800140c:	e023      	b.n	8001456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b41      	subs	r3, #65	@ 0x41
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b41      	subs	r3, #65	@ 0x41
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <HAL_ADC_ConfigChannel+0x234>)
 8001458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <HAL_ADC_ConfigChannel+0x238>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1cc>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d105      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_ADC_ConfigChannel+0x238>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d123      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x21e>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b10      	cmp	r3, #16
 8001488:	d003      	beq.n	8001492 <HAL_ADC_ConfigChannel+0x1e6>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b11      	cmp	r3, #17
 8001490:	d11b      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d111      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_ADC_ConfigChannel+0x23c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a10      	ldr	r2, [pc, #64]	@ (80014ec <HAL_ADC_ConfigChannel+0x240>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	0c9a      	lsrs	r2, r3, #18
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40012300 	.word	0x40012300
 80014e4:	40012000 	.word	0x40012000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f8:	4b79      	ldr	r3, [pc, #484]	@ (80016e0 <ADC_Init+0x1f0>)
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	021a      	lsls	r2, r3, #8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	4a58      	ldr	r2, [pc, #352]	@ (80016e4 <ADC_Init+0x1f4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d022      	beq.n	80015ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e00f      	b.n	80015ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0202 	bic.w	r2, r2, #2
 80015fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
 8001608:	005a      	lsls	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800162a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800163a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	3b01      	subs	r3, #1
 8001648:	035a      	lsls	r2, r3, #13
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	e007      	b.n	8001664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001662:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	3b01      	subs	r3, #1
 8001680:	051a      	lsls	r2, r3, #20
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a6:	025a      	lsls	r2, r3, #9
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	029a      	lsls	r2, r3, #10
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	609a      	str	r2, [r3, #8]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40012300 	.word	0x40012300
 80016e4:	0f000001 	.word	0x0f000001

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff5c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffb0 	bl	8001808 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e159      	b.n	8001b84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8148 	bne.w	8001b7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	2b02      	cmp	r3, #2
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	69b9      	ldr	r1, [r7, #24]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a2 	beq.w	8001b7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	4a56      	ldr	r2, [pc, #344]	@ (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4a:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a56:	4a52      	ldr	r2, [pc, #328]	@ (8001ba0 <HAL_GPIO_Init+0x2ec>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x202>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <HAL_GPIO_Init+0x2f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x1fe>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a47      	ldr	r2, [pc, #284]	@ (8001bac <HAL_GPIO_Init+0x2f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a46      	ldr	r2, [pc, #280]	@ (8001bb0 <HAL_GPIO_Init+0x2fc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x1f6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a45      	ldr	r2, [pc, #276]	@ (8001bb4 <HAL_GPIO_Init+0x300>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x1f2>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e008      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e004      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f002 0203 	and.w	r2, r2, #3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac8:	4935      	ldr	r1, [pc, #212]	@ (8001ba0 <HAL_GPIO_Init+0x2ec>)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad6:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afa:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b78:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <HAL_GPIO_Init+0x304>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f aea2 	bls.w	80018d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e267      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c0e:	4b88      	ldr	r3, [pc, #544]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d00c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b85      	ldr	r3, [pc, #532]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4b82      	ldr	r3, [pc, #520]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b7e      	ldr	r3, [pc, #504]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e242      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b76      	ldr	r3, [pc, #472]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b70      	ldr	r3, [pc, #448]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6f      	ldr	r2, [pc, #444]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b69      	ldr	r3, [pc, #420]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a68      	ldr	r2, [pc, #416]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a65      	ldr	r2, [pc, #404]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f940 	bl	8000f2c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f93c 	bl	8000f2c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e207      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f92c 	bl	8000f2c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f928 	bl	8000f2c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1f3      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b51      	ldr	r3, [pc, #324]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d06:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c7      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4937      	ldr	r1, [pc, #220]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff f8e1 	bl	8000f2c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f8dd 	bl	8000f2c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a8      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4925      	ldr	r1, [pc, #148]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f8c0 	bl	8000f2c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff f8bc 	bl	8000f2c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e187      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d036      	beq.n	8001e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f8a0 	bl	8000f2c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff f89c 	bl	8000f2c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e167      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f889 	bl	8000f2c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00e      	b.n	8001e3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f885 	bl	8000f2c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d907      	bls.n	8001e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e150      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	42470000 	.word	0x42470000
 8001e38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b88      	ldr	r3, [pc, #544]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ea      	bne.n	8001e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8097 	beq.w	8001f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b81      	ldr	r3, [pc, #516]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e76:	4b7a      	ldr	r3, [pc, #488]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b77      	ldr	r3, [pc, #476]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b74      	ldr	r3, [pc, #464]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a73      	ldr	r2, [pc, #460]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f845 	bl	8000f2c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff f841 	bl	8000f2c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e10c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x2ea>
 8001ecc:	4b64      	ldr	r3, [pc, #400]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	4a63      	ldr	r2, [pc, #396]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x30c>
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	4b5c      	ldr	r3, [pc, #368]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001efc:	4b58      	ldr	r3, [pc, #352]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a57      	ldr	r2, [pc, #348]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a54      	ldr	r2, [pc, #336]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f806 	bl	8000f2c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff f802 	bl	8000f2c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0cb      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	4b49      	ldr	r3, [pc, #292]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ee      	beq.n	8001f24 <HAL_RCC_OscConfig+0x334>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7fe fff0 	bl	8000f2c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe ffec 	bl	8000f2c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0b5      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a38      	ldr	r2, [pc, #224]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a1 	beq.w	80020d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8e:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d05c      	beq.n	8002054 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d141      	bne.n	8002026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ffc0 	bl	8000f2c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ffbc 	bl	8000f2c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e087      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	491b      	ldr	r1, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ff95 	bl	8000f2c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe ff91 	bl	8000f2c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e05c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x416>
 8002024:	e054      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe ff7e 	bl	8000f2c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe ff7a 	bl	8000f2c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e045      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x444>
 8002052:	e03d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e038      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000
 8002068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d028      	beq.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d121      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cc      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b68      	ldr	r3, [pc, #416]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90c      	bls.n	800211c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800213e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d044      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d119      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e067      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4934      	ldr	r1, [pc, #208]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7fe feac 	bl	8000f2c <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fea8 	bl	8000f2c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d20c      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fe0c 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	08004ddc 	.word	0x08004ddc
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b094      	sub	sp, #80	@ 0x50
 80022b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c4:	4b79      	ldr	r3, [pc, #484]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d00d      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x40>
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	f200 80e1 	bhi.w	8002498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x34>
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022de:	e0db      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e4:	e0db      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ea:	e0d8      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f6:	4b6d      	ldr	r3, [pc, #436]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	2200      	movs	r2, #0
 800230a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002314:	633b      	str	r3, [r7, #48]	@ 0x30
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
 800231a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800231e:	4622      	mov	r2, r4
 8002320:	462b      	mov	r3, r5
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	0159      	lsls	r1, r3, #5
 800232c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002330:	0150      	lsls	r0, r2, #5
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4621      	mov	r1, r4
 8002338:	1a51      	subs	r1, r2, r1
 800233a:	6139      	str	r1, [r7, #16]
 800233c:	4629      	mov	r1, r5
 800233e:	eb63 0301 	sbc.w	r3, r3, r1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002350:	4659      	mov	r1, fp
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	4651      	mov	r1, sl
 8002356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235a:	4651      	mov	r1, sl
 800235c:	018a      	lsls	r2, r1, #6
 800235e:	4651      	mov	r1, sl
 8002360:	ebb2 0801 	subs.w	r8, r2, r1
 8002364:	4659      	mov	r1, fp
 8002366:	eb63 0901 	sbc.w	r9, r3, r1
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	4623      	mov	r3, r4
 8002384:	eb18 0303 	adds.w	r3, r8, r3
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	462b      	mov	r3, r5
 800238c:	eb49 0303 	adc.w	r3, r9, r3
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800239e:	4629      	mov	r1, r5
 80023a0:	024b      	lsls	r3, r1, #9
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023a8:	4621      	mov	r1, r4
 80023aa:	024a      	lsls	r2, r1, #9
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b2:	2200      	movs	r2, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023bc:	f7fd ff60 	bl	8000280 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4613      	mov	r3, r2
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023c8:	e058      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ca:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	2200      	movs	r2, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	4611      	mov	r1, r2
 80023d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023e4:	4642      	mov	r2, r8
 80023e6:	464b      	mov	r3, r9
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	0159      	lsls	r1, r3, #5
 80023f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f6:	0150      	lsls	r0, r2, #5
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4641      	mov	r1, r8
 80023fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002402:	4649      	mov	r1, r9
 8002404:	eb63 0b01 	sbc.w	fp, r3, r1
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800241c:	ebb2 040a 	subs.w	r4, r2, sl
 8002420:	eb63 050b 	sbc.w	r5, r3, fp
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	00eb      	lsls	r3, r5, #3
 800242e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002432:	00e2      	lsls	r2, r4, #3
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	4643      	mov	r3, r8
 800243a:	18e3      	adds	r3, r4, r3
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	464b      	mov	r3, r9
 8002440:	eb45 0303 	adc.w	r3, r5, r3
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002452:	4629      	mov	r1, r5
 8002454:	028b      	lsls	r3, r1, #10
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800245c:	4621      	mov	r1, r4
 800245e:	028a      	lsls	r2, r1, #10
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	61fa      	str	r2, [r7, #28]
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	f7fd ff06 	bl	8000280 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800248c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800248e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800249c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3750      	adds	r7, #80	@ 0x50
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_RCC_GetHCLKFreq+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	@ (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08004dec 	.word	0x08004dec

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024fc:	f7ff ffdc 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0b5b      	lsrs	r3, r3, #13
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4903      	ldr	r1, [pc, #12]	@ (800251c <HAL_RCC_GetPCLK2Freq+0x24>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	08004dec 	.word	0x08004dec

08002520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e041      	b.n	80025b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fb44 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 fac0 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e041      	b.n	8002654 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f839 	bl	800265c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f000 fa71 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_TIM_PWM_Start+0x24>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e022      	b.n	80026da <HAL_TIM_PWM_Start+0x6a>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d109      	bne.n	80026ae <HAL_TIM_PWM_Start+0x3e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e015      	b.n	80026da <HAL_TIM_PWM_Start+0x6a>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d109      	bne.n	80026c8 <HAL_TIM_PWM_Start+0x58>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e008      	b.n	80026da <HAL_TIM_PWM_Start+0x6a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e068      	b.n	80027b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x82>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f0:	e013      	b.n	800271a <HAL_TIM_PWM_Start+0xaa>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_PWM_Start+0x92>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002700:	e00b      	b.n	800271a <HAL_TIM_PWM_Start+0xaa>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0xa2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002710:	e003      	b.n	800271a <HAL_TIM_PWM_Start+0xaa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fc8a 	bl	800303c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	@ (80027bc <HAL_TIM_PWM_Start+0x14c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d107      	bne.n	8002742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <HAL_TIM_PWM_Start+0x14c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_TIM_PWM_Start+0x10e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d013      	beq.n	800277e <HAL_TIM_PWM_Start+0x10e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_TIM_PWM_Start+0x150>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_TIM_PWM_Start+0x10e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <HAL_TIM_PWM_Start+0x154>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_TIM_PWM_Start+0x10e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a16      	ldr	r2, [pc, #88]	@ (80027c8 <HAL_TIM_PWM_Start+0x158>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_PWM_Start+0x10e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <HAL_TIM_PWM_Start+0x15c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d111      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b06      	cmp	r3, #6
 800278e:	d010      	beq.n	80027b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	e007      	b.n	80027b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40014000 	.word	0x40014000

080027d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0ae      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	f200 809f 	bhi.w	800293c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002839 	.word	0x08002839
 8002808:	0800293d 	.word	0x0800293d
 800280c:	0800293d 	.word	0x0800293d
 8002810:	0800293d 	.word	0x0800293d
 8002814:	08002879 	.word	0x08002879
 8002818:	0800293d 	.word	0x0800293d
 800281c:	0800293d 	.word	0x0800293d
 8002820:	0800293d 	.word	0x0800293d
 8002824:	080028bb 	.word	0x080028bb
 8002828:	0800293d 	.word	0x0800293d
 800282c:	0800293d 	.word	0x0800293d
 8002830:	0800293d 	.word	0x0800293d
 8002834:	080028fb 	.word	0x080028fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f9d6 	bl	8002bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6999      	ldr	r1, [r3, #24]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	619a      	str	r2, [r3, #24]
      break;
 8002876:	e064      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fa1c 	bl	8002cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6999      	ldr	r1, [r3, #24]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	021a      	lsls	r2, r3, #8
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	619a      	str	r2, [r3, #24]
      break;
 80028b8:	e043      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fa67 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0208 	orr.w	r2, r2, #8
 80028d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0204 	bic.w	r2, r2, #4
 80028e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69d9      	ldr	r1, [r3, #28]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	61da      	str	r2, [r3, #28]
      break;
 80028f8:	e023      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fab1 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69d9      	ldr	r1, [r3, #28]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	021a      	lsls	r2, r3, #8
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	61da      	str	r2, [r3, #28]
      break;
 800293a:	e002      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	75fb      	strb	r3, [r7, #23]
      break;
 8002940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_TIM_ConfigClockSource+0x1c>
 800296c:	2302      	movs	r3, #2
 800296e:	e0b4      	b.n	8002ada <HAL_TIM_ConfigClockSource+0x186>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a8:	d03e      	beq.n	8002a28 <HAL_TIM_ConfigClockSource+0xd4>
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ae:	f200 8087 	bhi.w	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b6:	f000 8086 	beq.w	8002ac6 <HAL_TIM_ConfigClockSource+0x172>
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029be:	d87f      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b70      	cmp	r3, #112	@ 0x70
 80029c2:	d01a      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xa6>
 80029c4:	2b70      	cmp	r3, #112	@ 0x70
 80029c6:	d87b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b60      	cmp	r3, #96	@ 0x60
 80029ca:	d050      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x11a>
 80029cc:	2b60      	cmp	r3, #96	@ 0x60
 80029ce:	d877      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b50      	cmp	r3, #80	@ 0x50
 80029d2:	d03c      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xfa>
 80029d4:	2b50      	cmp	r3, #80	@ 0x50
 80029d6:	d873      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d058      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x13a>
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d86f      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b30      	cmp	r3, #48	@ 0x30
 80029e2:	d064      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x15a>
 80029e4:	2b30      	cmp	r3, #48	@ 0x30
 80029e6:	d86b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d060      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x15a>
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d867      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05c      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x15a>
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d05a      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x15a>
 80029f8:	e062      	b.n	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a0a:	f000 faf7 	bl	8002ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	609a      	str	r2, [r3, #8]
      break;
 8002a26:	e04f      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a38:	f000 fae0 	bl	8002ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a4a:	609a      	str	r2, [r3, #8]
      break;
 8002a4c:	e03c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 fa54 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2150      	movs	r1, #80	@ 0x50
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 faad 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e02c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 fa73 	bl	8002f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2160      	movs	r1, #96	@ 0x60
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fa9d 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e01c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 fa34 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2140      	movs	r1, #64	@ 0x40
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa8d 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e00c      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f000 fa84 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002abe:	e003      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e000      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a37      	ldr	r2, [pc, #220]	@ (8002bd4 <TIM_Base_SetConfig+0xf0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00f      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a34      	ldr	r2, [pc, #208]	@ (8002bd8 <TIM_Base_SetConfig+0xf4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <TIM_Base_SetConfig+0xf8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <TIM_Base_SetConfig+0xfc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <TIM_Base_SetConfig+0xf0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d017      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a25      	ldr	r2, [pc, #148]	@ (8002bd8 <TIM_Base_SetConfig+0xf4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a24      	ldr	r2, [pc, #144]	@ (8002bdc <TIM_Base_SetConfig+0xf8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <TIM_Base_SetConfig+0xfc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <TIM_Base_SetConfig+0x100>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <TIM_Base_SetConfig+0x104>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a20      	ldr	r2, [pc, #128]	@ (8002bec <TIM_Base_SetConfig+0x108>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <TIM_Base_SetConfig+0xf0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d103      	bne.n	8002bae <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0201 	bic.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0308 	bic.w	r3, r3, #8
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d111      	bne.n	8002c92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000

08002cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0320 	bic.w	r3, r3, #32
 8002d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	@ (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10d      	bne.n	8002d38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d113      	bne.n	8002d68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	@ (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010000 	.word	0x40010000

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	@ (8002f04 <TIM_OC4_SetConfig+0x9c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0210 	bic.w	r2, r3, #16
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f043 0307 	orr.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	431a      	orrs	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800309c:	2302      	movs	r3, #2
 800309e:	e050      	b.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ec:	d013      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a15      	ldr	r2, [pc, #84]	@ (800315c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800311c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40014000 	.word	0x40014000

08003164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800317c:	2302      	movs	r3, #2
 800317e:	e03d      	b.n	80031fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e042      	b.n	80032a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd2c 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f973 	bl	8003538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d175      	bne.n	80033b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_UART_Transmit+0x2c>
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06e      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2221      	movs	r2, #33	@ 0x21
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e6:	f7fd fe21 	bl	8000f2c <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003300:	d108      	bne.n	8003314 <HAL_UART_Transmit+0x6c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e003      	b.n	800331c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800331c:	e02e      	b.n	800337c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f848 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03a      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3302      	adds	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e007      	b.n	800336e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3301      	adds	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1cb      	bne.n	800331e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	2140      	movs	r1, #64	@ 0x40
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f814 	bl	80033be <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e006      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	e03b      	b.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d037      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7fd fda8 	bl	8000f2c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <UART_WaitOnFlagUntilTimeout+0x30>
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e03a      	b.n	8003468 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d023      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b80      	cmp	r3, #128	@ 0x80
 8003404:	d020      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d01d      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d116      	bne.n	8003448 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f81d 	bl	8003470 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2208      	movs	r2, #8
 800343a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e00f      	b.n	8003468 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	429a      	cmp	r2, r3
 8003464:	d0b4      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b095      	sub	sp, #84	@ 0x54
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800348e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003498:	643a      	str	r2, [r7, #64]	@ 0x40
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800349e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003508:	61ba      	str	r2, [r7, #24]
 800350a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	613b      	str	r3, [r7, #16]
   return(result);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800352a:	bf00      	nop
 800352c:	3754      	adds	r7, #84	@ 0x54
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b0c0      	sub	sp, #256	@ 0x100
 800353e:	af00      	add	r7, sp, #0
 8003540:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	68d9      	ldr	r1, [r3, #12]
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	ea40 0301 	orr.w	r3, r0, r1
 8003560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	431a      	orrs	r2, r3
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	431a      	orrs	r2, r3
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003590:	f021 010c 	bic.w	r1, r1, #12
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800359e:	430b      	orrs	r3, r1
 80035a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	6999      	ldr	r1, [r3, #24]
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	ea40 0301 	orr.w	r3, r0, r1
 80035be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003804 <UART_SetConfig+0x2cc>)
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d005      	beq.n	80035d8 <UART_SetConfig+0xa0>
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003808 <UART_SetConfig+0x2d0>)
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d104      	bne.n	80035e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035d8:	f7fe ff8e 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 80035dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035e0:	e003      	b.n	80035ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035e2:	f7fe ff75 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80035e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f4:	f040 810c 	bne.w	8003810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003602:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	1891      	adds	r1, r2, r2
 8003610:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003612:	415b      	adcs	r3, r3
 8003614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800361a:	4621      	mov	r1, r4
 800361c:	eb12 0801 	adds.w	r8, r2, r1
 8003620:	4629      	mov	r1, r5
 8003622:	eb43 0901 	adc.w	r9, r3, r1
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363a:	4690      	mov	r8, r2
 800363c:	4699      	mov	r9, r3
 800363e:	4623      	mov	r3, r4
 8003640:	eb18 0303 	adds.w	r3, r8, r3
 8003644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003648:	462b      	mov	r3, r5
 800364a:	eb49 0303 	adc.w	r3, r9, r3
 800364e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800365e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003666:	460b      	mov	r3, r1
 8003668:	18db      	adds	r3, r3, r3
 800366a:	653b      	str	r3, [r7, #80]	@ 0x50
 800366c:	4613      	mov	r3, r2
 800366e:	eb42 0303 	adc.w	r3, r2, r3
 8003672:	657b      	str	r3, [r7, #84]	@ 0x54
 8003674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800367c:	f7fc fe00 	bl	8000280 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4b61      	ldr	r3, [pc, #388]	@ (800380c <UART_SetConfig+0x2d4>)
 8003686:	fba3 2302 	umull	r2, r3, r3, r2
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	011c      	lsls	r4, r3, #4
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003698:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800369c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	1891      	adds	r1, r2, r2
 80036a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036a8:	415b      	adcs	r3, r3
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036b0:	4641      	mov	r1, r8
 80036b2:	eb12 0a01 	adds.w	sl, r2, r1
 80036b6:	4649      	mov	r1, r9
 80036b8:	eb43 0b01 	adc.w	fp, r3, r1
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036d0:	4692      	mov	sl, r2
 80036d2:	469b      	mov	fp, r3
 80036d4:	4643      	mov	r3, r8
 80036d6:	eb1a 0303 	adds.w	r3, sl, r3
 80036da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036de:	464b      	mov	r3, r9
 80036e0:	eb4b 0303 	adc.w	r3, fp, r3
 80036e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036fc:	460b      	mov	r3, r1
 80036fe:	18db      	adds	r3, r3, r3
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
 8003702:	4613      	mov	r3, r2
 8003704:	eb42 0303 	adc.w	r3, r2, r3
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
 800370a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800370e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003712:	f7fc fdb5 	bl	8000280 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4611      	mov	r1, r2
 800371c:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <UART_SetConfig+0x2d4>)
 800371e:	fba3 2301 	umull	r2, r3, r3, r1
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2264      	movs	r2, #100	@ 0x64
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	1acb      	subs	r3, r1, r3
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003732:	4b36      	ldr	r3, [pc, #216]	@ (800380c <UART_SetConfig+0x2d4>)
 8003734:	fba3 2302 	umull	r2, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003740:	441c      	add	r4, r3
 8003742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003746:	2200      	movs	r2, #0
 8003748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800374c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003754:	4642      	mov	r2, r8
 8003756:	464b      	mov	r3, r9
 8003758:	1891      	adds	r1, r2, r2
 800375a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800375c:	415b      	adcs	r3, r3
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003764:	4641      	mov	r1, r8
 8003766:	1851      	adds	r1, r2, r1
 8003768:	6339      	str	r1, [r7, #48]	@ 0x30
 800376a:	4649      	mov	r1, r9
 800376c:	414b      	adcs	r3, r1
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800377c:	4659      	mov	r1, fp
 800377e:	00cb      	lsls	r3, r1, #3
 8003780:	4651      	mov	r1, sl
 8003782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003786:	4651      	mov	r1, sl
 8003788:	00ca      	lsls	r2, r1, #3
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	4603      	mov	r3, r0
 8003790:	4642      	mov	r2, r8
 8003792:	189b      	adds	r3, r3, r2
 8003794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003798:	464b      	mov	r3, r9
 800379a:	460a      	mov	r2, r1
 800379c:	eb42 0303 	adc.w	r3, r2, r3
 80037a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037b8:	460b      	mov	r3, r1
 80037ba:	18db      	adds	r3, r3, r3
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037be:	4613      	mov	r3, r2
 80037c0:	eb42 0303 	adc.w	r3, r2, r3
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037ce:	f7fc fd57 	bl	8000280 <__aeabi_uldivmod>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <UART_SetConfig+0x2d4>)
 80037d8:	fba3 1302 	umull	r1, r3, r3, r2
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	2164      	movs	r1, #100	@ 0x64
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	3332      	adds	r3, #50	@ 0x32
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <UART_SetConfig+0x2d4>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 0207 	and.w	r2, r3, #7
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4422      	add	r2, r4
 80037fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003800:	e106      	b.n	8003a10 <UART_SetConfig+0x4d8>
 8003802:	bf00      	nop
 8003804:	40011000 	.word	0x40011000
 8003808:	40011400 	.word	0x40011400
 800380c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003814:	2200      	movs	r2, #0
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800381a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800381e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003822:	4642      	mov	r2, r8
 8003824:	464b      	mov	r3, r9
 8003826:	1891      	adds	r1, r2, r2
 8003828:	6239      	str	r1, [r7, #32]
 800382a:	415b      	adcs	r3, r3
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
 800382e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003832:	4641      	mov	r1, r8
 8003834:	1854      	adds	r4, r2, r1
 8003836:	4649      	mov	r1, r9
 8003838:	eb43 0501 	adc.w	r5, r3, r1
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	00eb      	lsls	r3, r5, #3
 8003846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	4643      	mov	r3, r8
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003858:	464b      	mov	r3, r9
 800385a:	eb45 0303 	adc.w	r3, r5, r3
 800385e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800386e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800387e:	4629      	mov	r1, r5
 8003880:	008b      	lsls	r3, r1, #2
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003888:	4621      	mov	r1, r4
 800388a:	008a      	lsls	r2, r1, #2
 800388c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003890:	f7fc fcf6 	bl	8000280 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4b60      	ldr	r3, [pc, #384]	@ (8003a1c <UART_SetConfig+0x4e4>)
 800389a:	fba3 2302 	umull	r2, r3, r3, r2
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	011c      	lsls	r4, r3, #4
 80038a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038b4:	4642      	mov	r2, r8
 80038b6:	464b      	mov	r3, r9
 80038b8:	1891      	adds	r1, r2, r2
 80038ba:	61b9      	str	r1, [r7, #24]
 80038bc:	415b      	adcs	r3, r3
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c4:	4641      	mov	r1, r8
 80038c6:	1851      	adds	r1, r2, r1
 80038c8:	6139      	str	r1, [r7, #16]
 80038ca:	4649      	mov	r1, r9
 80038cc:	414b      	adcs	r3, r1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038dc:	4659      	mov	r1, fp
 80038de:	00cb      	lsls	r3, r1, #3
 80038e0:	4651      	mov	r1, sl
 80038e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e6:	4651      	mov	r1, sl
 80038e8:	00ca      	lsls	r2, r1, #3
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	4642      	mov	r2, r8
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038f8:	464b      	mov	r3, r9
 80038fa:	460a      	mov	r2, r1
 80038fc:	eb42 0303 	adc.w	r3, r2, r3
 8003900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800390e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800391c:	4649      	mov	r1, r9
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	4641      	mov	r1, r8
 8003922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003926:	4641      	mov	r1, r8
 8003928:	008a      	lsls	r2, r1, #2
 800392a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800392e:	f7fc fca7 	bl	8000280 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b38      	ldr	r3, [pc, #224]	@ (8003a1c <UART_SetConfig+0x4e4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	@ 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	3332      	adds	r3, #50	@ 0x32
 800394c:	4a33      	ldr	r2, [pc, #204]	@ (8003a1c <UART_SetConfig+0x4e4>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003958:	441c      	add	r4, r3
 800395a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800395e:	2200      	movs	r2, #0
 8003960:	673b      	str	r3, [r7, #112]	@ 0x70
 8003962:	677a      	str	r2, [r7, #116]	@ 0x74
 8003964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	1891      	adds	r1, r2, r2
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	415b      	adcs	r3, r3
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003978:	4641      	mov	r1, r8
 800397a:	1851      	adds	r1, r2, r1
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	4649      	mov	r1, r9
 8003980:	414b      	adcs	r3, r1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003990:	4659      	mov	r1, fp
 8003992:	00cb      	lsls	r3, r1, #3
 8003994:	4651      	mov	r1, sl
 8003996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800399a:	4651      	mov	r1, sl
 800399c:	00ca      	lsls	r2, r1, #3
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	4642      	mov	r2, r8
 80039a6:	189b      	adds	r3, r3, r2
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039aa:	464b      	mov	r3, r9
 80039ac:	460a      	mov	r2, r1
 80039ae:	eb42 0303 	adc.w	r3, r2, r3
 80039b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80039be:	667a      	str	r2, [r7, #100]	@ 0x64
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039cc:	4649      	mov	r1, r9
 80039ce:	008b      	lsls	r3, r1, #2
 80039d0:	4641      	mov	r1, r8
 80039d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d6:	4641      	mov	r1, r8
 80039d8:	008a      	lsls	r2, r1, #2
 80039da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039de:	f7fc fc4f 	bl	8000280 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <UART_SetConfig+0x4e4>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	@ 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	3332      	adds	r3, #50	@ 0x32
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <UART_SetConfig+0x4e4>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4422      	add	r2, r4
 8003a0e:	609a      	str	r2, [r3, #8]
}
 8003a10:	bf00      	nop
 8003a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a16:	46bd      	mov	sp, r7
 8003a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <siprintf>:
 8003a20:	b40e      	push	{r1, r2, r3}
 8003a22:	b510      	push	{r4, lr}
 8003a24:	b09d      	sub	sp, #116	@ 0x74
 8003a26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003a28:	9002      	str	r0, [sp, #8]
 8003a2a:	9006      	str	r0, [sp, #24]
 8003a2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a30:	480a      	ldr	r0, [pc, #40]	@ (8003a5c <siprintf+0x3c>)
 8003a32:	9107      	str	r1, [sp, #28]
 8003a34:	9104      	str	r1, [sp, #16]
 8003a36:	490a      	ldr	r1, [pc, #40]	@ (8003a60 <siprintf+0x40>)
 8003a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a3c:	9105      	str	r1, [sp, #20]
 8003a3e:	2400      	movs	r4, #0
 8003a40:	a902      	add	r1, sp, #8
 8003a42:	6800      	ldr	r0, [r0, #0]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003a48:	f000 f994 	bl	8003d74 <_svfiprintf_r>
 8003a4c:	9b02      	ldr	r3, [sp, #8]
 8003a4e:	701c      	strb	r4, [r3, #0]
 8003a50:	b01d      	add	sp, #116	@ 0x74
 8003a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a56:	b003      	add	sp, #12
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	2000000c 	.word	0x2000000c
 8003a60:	ffff0208 	.word	0xffff0208

08003a64 <memset>:
 8003a64:	4402      	add	r2, r0
 8003a66:	4603      	mov	r3, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <__errno>:
 8003a74:	4b01      	ldr	r3, [pc, #4]	@ (8003a7c <__errno+0x8>)
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	2000000c 	.word	0x2000000c

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab8 <__libc_init_array+0x38>)
 8003a84:	4c0d      	ldr	r4, [pc, #52]	@ (8003abc <__libc_init_array+0x3c>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac0 <__libc_init_array+0x40>)
 8003a92:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac4 <__libc_init_array+0x44>)
 8003a94:	f001 f994 	bl	8004dc0 <_init>
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	2600      	movs	r6, #0
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08005200 	.word	0x08005200
 8003abc:	08005200 	.word	0x08005200
 8003ac0:	08005200 	.word	0x08005200
 8003ac4:	08005204 	.word	0x08005204

08003ac8 <__retarget_lock_acquire_recursive>:
 8003ac8:	4770      	bx	lr

08003aca <__retarget_lock_release_recursive>:
 8003aca:	4770      	bx	lr

08003acc <_free_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4605      	mov	r5, r0
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d041      	beq.n	8003b58 <_free_r+0x8c>
 8003ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad8:	1f0c      	subs	r4, r1, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfb8      	it	lt
 8003ade:	18e4      	addlt	r4, r4, r3
 8003ae0:	f000 f8e0 	bl	8003ca4 <__malloc_lock>
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <_free_r+0x90>)
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	b933      	cbnz	r3, 8003af8 <_free_r+0x2c>
 8003aea:	6063      	str	r3, [r4, #4]
 8003aec:	6014      	str	r4, [r2, #0]
 8003aee:	4628      	mov	r0, r5
 8003af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af4:	f000 b8dc 	b.w	8003cb0 <__malloc_unlock>
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d908      	bls.n	8003b0e <_free_r+0x42>
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	1821      	adds	r1, r4, r0
 8003b00:	428b      	cmp	r3, r1
 8003b02:	bf01      	itttt	eq
 8003b04:	6819      	ldreq	r1, [r3, #0]
 8003b06:	685b      	ldreq	r3, [r3, #4]
 8003b08:	1809      	addeq	r1, r1, r0
 8003b0a:	6021      	streq	r1, [r4, #0]
 8003b0c:	e7ed      	b.n	8003aea <_free_r+0x1e>
 8003b0e:	461a      	mov	r2, r3
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b10b      	cbz	r3, 8003b18 <_free_r+0x4c>
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d9fa      	bls.n	8003b0e <_free_r+0x42>
 8003b18:	6811      	ldr	r1, [r2, #0]
 8003b1a:	1850      	adds	r0, r2, r1
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d10b      	bne.n	8003b38 <_free_r+0x6c>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	4401      	add	r1, r0
 8003b24:	1850      	adds	r0, r2, r1
 8003b26:	4283      	cmp	r3, r0
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	d1e0      	bne.n	8003aee <_free_r+0x22>
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	6053      	str	r3, [r2, #4]
 8003b32:	4408      	add	r0, r1
 8003b34:	6010      	str	r0, [r2, #0]
 8003b36:	e7da      	b.n	8003aee <_free_r+0x22>
 8003b38:	d902      	bls.n	8003b40 <_free_r+0x74>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	e7d6      	b.n	8003aee <_free_r+0x22>
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	1821      	adds	r1, r4, r0
 8003b44:	428b      	cmp	r3, r1
 8003b46:	bf04      	itt	eq
 8003b48:	6819      	ldreq	r1, [r3, #0]
 8003b4a:	685b      	ldreq	r3, [r3, #4]
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	bf04      	itt	eq
 8003b50:	1809      	addeq	r1, r1, r0
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	6054      	str	r4, [r2, #4]
 8003b56:	e7ca      	b.n	8003aee <_free_r+0x22>
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000033c 	.word	0x2000033c

08003b60 <sbrk_aligned>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba0 <sbrk_aligned+0x40>)
 8003b64:	460c      	mov	r4, r1
 8003b66:	6831      	ldr	r1, [r6, #0]
 8003b68:	4605      	mov	r5, r0
 8003b6a:	b911      	cbnz	r1, 8003b72 <sbrk_aligned+0x12>
 8003b6c:	f000 fba4 	bl	80042b8 <_sbrk_r>
 8003b70:	6030      	str	r0, [r6, #0]
 8003b72:	4621      	mov	r1, r4
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 fb9f 	bl	80042b8 <_sbrk_r>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	d103      	bne.n	8003b86 <sbrk_aligned+0x26>
 8003b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b82:	4620      	mov	r0, r4
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d0f8      	beq.n	8003b82 <sbrk_aligned+0x22>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4628      	mov	r0, r5
 8003b94:	f000 fb90 	bl	80042b8 <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d1f2      	bne.n	8003b82 <sbrk_aligned+0x22>
 8003b9c:	e7ef      	b.n	8003b7e <sbrk_aligned+0x1e>
 8003b9e:	bf00      	nop
 8003ba0:	20000338 	.word	0x20000338

08003ba4 <_malloc_r>:
 8003ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ba8:	1ccd      	adds	r5, r1, #3
 8003baa:	f025 0503 	bic.w	r5, r5, #3
 8003bae:	3508      	adds	r5, #8
 8003bb0:	2d0c      	cmp	r5, #12
 8003bb2:	bf38      	it	cc
 8003bb4:	250c      	movcc	r5, #12
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	4606      	mov	r6, r0
 8003bba:	db01      	blt.n	8003bc0 <_malloc_r+0x1c>
 8003bbc:	42a9      	cmp	r1, r5
 8003bbe:	d904      	bls.n	8003bca <_malloc_r+0x26>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca0 <_malloc_r+0xfc>
 8003bce:	f000 f869 	bl	8003ca4 <__malloc_lock>
 8003bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd6:	461c      	mov	r4, r3
 8003bd8:	bb44      	cbnz	r4, 8003c2c <_malloc_r+0x88>
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff ffbf 	bl	8003b60 <sbrk_aligned>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	4604      	mov	r4, r0
 8003be6:	d158      	bne.n	8003c9a <_malloc_r+0xf6>
 8003be8:	f8d8 4000 	ldr.w	r4, [r8]
 8003bec:	4627      	mov	r7, r4
 8003bee:	2f00      	cmp	r7, #0
 8003bf0:	d143      	bne.n	8003c7a <_malloc_r+0xd6>
 8003bf2:	2c00      	cmp	r4, #0
 8003bf4:	d04b      	beq.n	8003c8e <_malloc_r+0xea>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	eb04 0903 	add.w	r9, r4, r3
 8003c00:	f000 fb5a 	bl	80042b8 <_sbrk_r>
 8003c04:	4581      	cmp	r9, r0
 8003c06:	d142      	bne.n	8003c8e <_malloc_r+0xea>
 8003c08:	6821      	ldr	r1, [r4, #0]
 8003c0a:	1a6d      	subs	r5, r5, r1
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ffa6 	bl	8003b60 <sbrk_aligned>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d03a      	beq.n	8003c8e <_malloc_r+0xea>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	442b      	add	r3, r5
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	bb62      	cbnz	r2, 8003c80 <_malloc_r+0xdc>
 8003c26:	f8c8 7000 	str.w	r7, [r8]
 8003c2a:	e00f      	b.n	8003c4c <_malloc_r+0xa8>
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	1b52      	subs	r2, r2, r5
 8003c30:	d420      	bmi.n	8003c74 <_malloc_r+0xd0>
 8003c32:	2a0b      	cmp	r2, #11
 8003c34:	d917      	bls.n	8003c66 <_malloc_r+0xc2>
 8003c36:	1961      	adds	r1, r4, r5
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	6025      	str	r5, [r4, #0]
 8003c3c:	bf18      	it	ne
 8003c3e:	6059      	strne	r1, [r3, #4]
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	bf08      	it	eq
 8003c44:	f8c8 1000 	streq.w	r1, [r8]
 8003c48:	5162      	str	r2, [r4, r5]
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 f82f 	bl	8003cb0 <__malloc_unlock>
 8003c52:	f104 000b 	add.w	r0, r4, #11
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	f020 0007 	bic.w	r0, r0, #7
 8003c5c:	1ac2      	subs	r2, r0, r3
 8003c5e:	bf1c      	itt	ne
 8003c60:	1a1b      	subne	r3, r3, r0
 8003c62:	50a3      	strne	r3, [r4, r2]
 8003c64:	e7af      	b.n	8003bc6 <_malloc_r+0x22>
 8003c66:	6862      	ldr	r2, [r4, #4]
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	bf0c      	ite	eq
 8003c6c:	f8c8 2000 	streq.w	r2, [r8]
 8003c70:	605a      	strne	r2, [r3, #4]
 8003c72:	e7eb      	b.n	8003c4c <_malloc_r+0xa8>
 8003c74:	4623      	mov	r3, r4
 8003c76:	6864      	ldr	r4, [r4, #4]
 8003c78:	e7ae      	b.n	8003bd8 <_malloc_r+0x34>
 8003c7a:	463c      	mov	r4, r7
 8003c7c:	687f      	ldr	r7, [r7, #4]
 8003c7e:	e7b6      	b.n	8003bee <_malloc_r+0x4a>
 8003c80:	461a      	mov	r2, r3
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d1fb      	bne.n	8003c80 <_malloc_r+0xdc>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	e7de      	b.n	8003c4c <_malloc_r+0xa8>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	4630      	mov	r0, r6
 8003c94:	f000 f80c 	bl	8003cb0 <__malloc_unlock>
 8003c98:	e794      	b.n	8003bc4 <_malloc_r+0x20>
 8003c9a:	6005      	str	r5, [r0, #0]
 8003c9c:	e7d6      	b.n	8003c4c <_malloc_r+0xa8>
 8003c9e:	bf00      	nop
 8003ca0:	2000033c 	.word	0x2000033c

08003ca4 <__malloc_lock>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	@ (8003cac <__malloc_lock+0x8>)
 8003ca6:	f7ff bf0f 	b.w	8003ac8 <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000334 	.word	0x20000334

08003cb0 <__malloc_unlock>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	@ (8003cb8 <__malloc_unlock+0x8>)
 8003cb2:	f7ff bf0a 	b.w	8003aca <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000334 	.word	0x20000334

08003cbc <__ssputs_r>:
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	688e      	ldr	r6, [r1, #8]
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	42be      	cmp	r6, r7
 8003cc6:	680b      	ldr	r3, [r1, #0]
 8003cc8:	4682      	mov	sl, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4690      	mov	r8, r2
 8003cce:	d82d      	bhi.n	8003d2c <__ssputs_r+0x70>
 8003cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cd8:	d026      	beq.n	8003d28 <__ssputs_r+0x6c>
 8003cda:	6965      	ldr	r5, [r4, #20]
 8003cdc:	6909      	ldr	r1, [r1, #16]
 8003cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ce2:	eba3 0901 	sub.w	r9, r3, r1
 8003ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cea:	1c7b      	adds	r3, r7, #1
 8003cec:	444b      	add	r3, r9
 8003cee:	106d      	asrs	r5, r5, #1
 8003cf0:	429d      	cmp	r5, r3
 8003cf2:	bf38      	it	cc
 8003cf4:	461d      	movcc	r5, r3
 8003cf6:	0553      	lsls	r3, r2, #21
 8003cf8:	d527      	bpl.n	8003d4a <__ssputs_r+0x8e>
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7ff ff52 	bl	8003ba4 <_malloc_r>
 8003d00:	4606      	mov	r6, r0
 8003d02:	b360      	cbz	r0, 8003d5e <__ssputs_r+0xa2>
 8003d04:	6921      	ldr	r1, [r4, #16]
 8003d06:	464a      	mov	r2, r9
 8003d08:	f000 fae6 	bl	80042d8 <memcpy>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	6126      	str	r6, [r4, #16]
 8003d1a:	6165      	str	r5, [r4, #20]
 8003d1c:	444e      	add	r6, r9
 8003d1e:	eba5 0509 	sub.w	r5, r5, r9
 8003d22:	6026      	str	r6, [r4, #0]
 8003d24:	60a5      	str	r5, [r4, #8]
 8003d26:	463e      	mov	r6, r7
 8003d28:	42be      	cmp	r6, r7
 8003d2a:	d900      	bls.n	8003d2e <__ssputs_r+0x72>
 8003d2c:	463e      	mov	r6, r7
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	4632      	mov	r2, r6
 8003d32:	4641      	mov	r1, r8
 8003d34:	f000 faa6 	bl	8004284 <memmove>
 8003d38:	68a3      	ldr	r3, [r4, #8]
 8003d3a:	1b9b      	subs	r3, r3, r6
 8003d3c:	60a3      	str	r3, [r4, #8]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	4433      	add	r3, r6
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4a:	462a      	mov	r2, r5
 8003d4c:	f000 fad2 	bl	80042f4 <_realloc_r>
 8003d50:	4606      	mov	r6, r0
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d1e0      	bne.n	8003d18 <__ssputs_r+0x5c>
 8003d56:	6921      	ldr	r1, [r4, #16]
 8003d58:	4650      	mov	r0, sl
 8003d5a:	f7ff feb7 	bl	8003acc <_free_r>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	f8ca 3000 	str.w	r3, [sl]
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	e7e9      	b.n	8003d46 <__ssputs_r+0x8a>
	...

08003d74 <_svfiprintf_r>:
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	4698      	mov	r8, r3
 8003d7a:	898b      	ldrh	r3, [r1, #12]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	b09d      	sub	sp, #116	@ 0x74
 8003d80:	4607      	mov	r7, r0
 8003d82:	460d      	mov	r5, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	d510      	bpl.n	8003daa <_svfiprintf_r+0x36>
 8003d88:	690b      	ldr	r3, [r1, #16]
 8003d8a:	b973      	cbnz	r3, 8003daa <_svfiprintf_r+0x36>
 8003d8c:	2140      	movs	r1, #64	@ 0x40
 8003d8e:	f7ff ff09 	bl	8003ba4 <_malloc_r>
 8003d92:	6028      	str	r0, [r5, #0]
 8003d94:	6128      	str	r0, [r5, #16]
 8003d96:	b930      	cbnz	r0, 8003da6 <_svfiprintf_r+0x32>
 8003d98:	230c      	movs	r3, #12
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	b01d      	add	sp, #116	@ 0x74
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	2340      	movs	r3, #64	@ 0x40
 8003da8:	616b      	str	r3, [r5, #20]
 8003daa:	2300      	movs	r3, #0
 8003dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dae:	2320      	movs	r3, #32
 8003db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db8:	2330      	movs	r3, #48	@ 0x30
 8003dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f58 <_svfiprintf_r+0x1e4>
 8003dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dc2:	f04f 0901 	mov.w	r9, #1
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	469a      	mov	sl, r3
 8003dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dce:	b10a      	cbz	r2, 8003dd4 <_svfiprintf_r+0x60>
 8003dd0:	2a25      	cmp	r2, #37	@ 0x25
 8003dd2:	d1f9      	bne.n	8003dc8 <_svfiprintf_r+0x54>
 8003dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8003dd8:	d00b      	beq.n	8003df2 <_svfiprintf_r+0x7e>
 8003dda:	465b      	mov	r3, fp
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4629      	mov	r1, r5
 8003de0:	4638      	mov	r0, r7
 8003de2:	f7ff ff6b 	bl	8003cbc <__ssputs_r>
 8003de6:	3001      	adds	r0, #1
 8003de8:	f000 80a7 	beq.w	8003f3a <_svfiprintf_r+0x1c6>
 8003dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dee:	445a      	add	r2, fp
 8003df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003df2:	f89a 3000 	ldrb.w	r3, [sl]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 809f 	beq.w	8003f3a <_svfiprintf_r+0x1c6>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e06:	f10a 0a01 	add.w	sl, sl, #1
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	9307      	str	r3, [sp, #28]
 8003e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e14:	4654      	mov	r4, sl
 8003e16:	2205      	movs	r2, #5
 8003e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1c:	484e      	ldr	r0, [pc, #312]	@ (8003f58 <_svfiprintf_r+0x1e4>)
 8003e1e:	f7fc f9df 	bl	80001e0 <memchr>
 8003e22:	9a04      	ldr	r2, [sp, #16]
 8003e24:	b9d8      	cbnz	r0, 8003e5e <_svfiprintf_r+0xea>
 8003e26:	06d0      	lsls	r0, r2, #27
 8003e28:	bf44      	itt	mi
 8003e2a:	2320      	movmi	r3, #32
 8003e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e30:	0711      	lsls	r1, r2, #28
 8003e32:	bf44      	itt	mi
 8003e34:	232b      	movmi	r3, #43	@ 0x2b
 8003e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e40:	d015      	beq.n	8003e6e <_svfiprintf_r+0xfa>
 8003e42:	9a07      	ldr	r2, [sp, #28]
 8003e44:	4654      	mov	r4, sl
 8003e46:	2000      	movs	r0, #0
 8003e48:	f04f 0c0a 	mov.w	ip, #10
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e52:	3b30      	subs	r3, #48	@ 0x30
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	d94b      	bls.n	8003ef0 <_svfiprintf_r+0x17c>
 8003e58:	b1b0      	cbz	r0, 8003e88 <_svfiprintf_r+0x114>
 8003e5a:	9207      	str	r2, [sp, #28]
 8003e5c:	e014      	b.n	8003e88 <_svfiprintf_r+0x114>
 8003e5e:	eba0 0308 	sub.w	r3, r0, r8
 8003e62:	fa09 f303 	lsl.w	r3, r9, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	9304      	str	r3, [sp, #16]
 8003e6a:	46a2      	mov	sl, r4
 8003e6c:	e7d2      	b.n	8003e14 <_svfiprintf_r+0xa0>
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	1d19      	adds	r1, r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	9103      	str	r1, [sp, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfbb      	ittet	lt
 8003e7a:	425b      	neglt	r3, r3
 8003e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e80:	9307      	strge	r3, [sp, #28]
 8003e82:	9307      	strlt	r3, [sp, #28]
 8003e84:	bfb8      	it	lt
 8003e86:	9204      	strlt	r2, [sp, #16]
 8003e88:	7823      	ldrb	r3, [r4, #0]
 8003e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e8c:	d10a      	bne.n	8003ea4 <_svfiprintf_r+0x130>
 8003e8e:	7863      	ldrb	r3, [r4, #1]
 8003e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e92:	d132      	bne.n	8003efa <_svfiprintf_r+0x186>
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	9203      	str	r2, [sp, #12]
 8003e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ea0:	3402      	adds	r4, #2
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f68 <_svfiprintf_r+0x1f4>
 8003ea8:	7821      	ldrb	r1, [r4, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	4650      	mov	r0, sl
 8003eae:	f7fc f997 	bl	80001e0 <memchr>
 8003eb2:	b138      	cbz	r0, 8003ec4 <_svfiprintf_r+0x150>
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	eba0 000a 	sub.w	r0, r0, sl
 8003eba:	2240      	movs	r2, #64	@ 0x40
 8003ebc:	4082      	lsls	r2, r0
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	3401      	adds	r4, #1
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec8:	4824      	ldr	r0, [pc, #144]	@ (8003f5c <_svfiprintf_r+0x1e8>)
 8003eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ece:	2206      	movs	r2, #6
 8003ed0:	f7fc f986 	bl	80001e0 <memchr>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d036      	beq.n	8003f46 <_svfiprintf_r+0x1d2>
 8003ed8:	4b21      	ldr	r3, [pc, #132]	@ (8003f60 <_svfiprintf_r+0x1ec>)
 8003eda:	bb1b      	cbnz	r3, 8003f24 <_svfiprintf_r+0x1b0>
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	3307      	adds	r3, #7
 8003ee0:	f023 0307 	bic.w	r3, r3, #7
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eea:	4433      	add	r3, r6
 8003eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eee:	e76a      	b.n	8003dc6 <_svfiprintf_r+0x52>
 8003ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	e7a8      	b.n	8003e4c <_svfiprintf_r+0xd8>
 8003efa:	2300      	movs	r3, #0
 8003efc:	3401      	adds	r4, #1
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0c0a 	mov.w	ip, #10
 8003f06:	4620      	mov	r0, r4
 8003f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f0c:	3a30      	subs	r2, #48	@ 0x30
 8003f0e:	2a09      	cmp	r2, #9
 8003f10:	d903      	bls.n	8003f1a <_svfiprintf_r+0x1a6>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0c6      	beq.n	8003ea4 <_svfiprintf_r+0x130>
 8003f16:	9105      	str	r1, [sp, #20]
 8003f18:	e7c4      	b.n	8003ea4 <_svfiprintf_r+0x130>
 8003f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1e:	4604      	mov	r4, r0
 8003f20:	2301      	movs	r3, #1
 8003f22:	e7f0      	b.n	8003f06 <_svfiprintf_r+0x192>
 8003f24:	ab03      	add	r3, sp, #12
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <_svfiprintf_r+0x1f0>)
 8003f2c:	a904      	add	r1, sp, #16
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f3af 8000 	nop.w
 8003f34:	1c42      	adds	r2, r0, #1
 8003f36:	4606      	mov	r6, r0
 8003f38:	d1d6      	bne.n	8003ee8 <_svfiprintf_r+0x174>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	065b      	lsls	r3, r3, #25
 8003f3e:	f53f af2d 	bmi.w	8003d9c <_svfiprintf_r+0x28>
 8003f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f44:	e72c      	b.n	8003da0 <_svfiprintf_r+0x2c>
 8003f46:	ab03      	add	r3, sp, #12
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	462a      	mov	r2, r5
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <_svfiprintf_r+0x1f0>)
 8003f4e:	a904      	add	r1, sp, #16
 8003f50:	4638      	mov	r0, r7
 8003f52:	f000 f879 	bl	8004048 <_printf_i>
 8003f56:	e7ed      	b.n	8003f34 <_svfiprintf_r+0x1c0>
 8003f58:	08004df4 	.word	0x08004df4
 8003f5c:	08004dfe 	.word	0x08004dfe
 8003f60:	00000000 	.word	0x00000000
 8003f64:	08003cbd 	.word	0x08003cbd
 8003f68:	08004dfa 	.word	0x08004dfa

08003f6c <_printf_common>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	4616      	mov	r6, r2
 8003f72:	4698      	mov	r8, r3
 8003f74:	688a      	ldr	r2, [r1, #8]
 8003f76:	690b      	ldr	r3, [r1, #16]
 8003f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfb8      	it	lt
 8003f80:	4613      	movlt	r3, r2
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f88:	4607      	mov	r7, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b10a      	cbz	r2, 8003f92 <_printf_common+0x26>
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	0699      	lsls	r1, r3, #26
 8003f96:	bf42      	ittt	mi
 8003f98:	6833      	ldrmi	r3, [r6, #0]
 8003f9a:	3302      	addmi	r3, #2
 8003f9c:	6033      	strmi	r3, [r6, #0]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d106      	bne.n	8003fb4 <_printf_common+0x48>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	6832      	ldr	r2, [r6, #0]
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dc26      	bgt.n	8004002 <_printf_common+0x96>
 8003fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	3b00      	subs	r3, #0
 8003fbc:	bf18      	it	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	0692      	lsls	r2, r2, #26
 8003fc2:	d42b      	bmi.n	800401c <_printf_common+0xb0>
 8003fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fc8:	4641      	mov	r1, r8
 8003fca:	4638      	mov	r0, r7
 8003fcc:	47c8      	blx	r9
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d01e      	beq.n	8004010 <_printf_common+0xa4>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	f003 0306 	and.w	r3, r3, #6
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	bf02      	ittt	eq
 8003fde:	68e5      	ldreq	r5, [r4, #12]
 8003fe0:	6833      	ldreq	r3, [r6, #0]
 8003fe2:	1aed      	subeq	r5, r5, r3
 8003fe4:	68a3      	ldr	r3, [r4, #8]
 8003fe6:	bf0c      	ite	eq
 8003fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fec:	2500      	movne	r5, #0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bfc4      	itt	gt
 8003ff2:	1a9b      	subgt	r3, r3, r2
 8003ff4:	18ed      	addgt	r5, r5, r3
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	341a      	adds	r4, #26
 8003ffa:	42b5      	cmp	r5, r6
 8003ffc:	d11a      	bne.n	8004034 <_printf_common+0xc8>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e008      	b.n	8004014 <_printf_common+0xa8>
 8004002:	2301      	movs	r3, #1
 8004004:	4652      	mov	r2, sl
 8004006:	4641      	mov	r1, r8
 8004008:	4638      	mov	r0, r7
 800400a:	47c8      	blx	r9
 800400c:	3001      	adds	r0, #1
 800400e:	d103      	bne.n	8004018 <_printf_common+0xac>
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	3501      	adds	r5, #1
 800401a:	e7c6      	b.n	8003faa <_printf_common+0x3e>
 800401c:	18e1      	adds	r1, r4, r3
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	2030      	movs	r0, #48	@ 0x30
 8004022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004026:	4422      	add	r2, r4
 8004028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800402c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004030:	3302      	adds	r3, #2
 8004032:	e7c7      	b.n	8003fc4 <_printf_common+0x58>
 8004034:	2301      	movs	r3, #1
 8004036:	4622      	mov	r2, r4
 8004038:	4641      	mov	r1, r8
 800403a:	4638      	mov	r0, r7
 800403c:	47c8      	blx	r9
 800403e:	3001      	adds	r0, #1
 8004040:	d0e6      	beq.n	8004010 <_printf_common+0xa4>
 8004042:	3601      	adds	r6, #1
 8004044:	e7d9      	b.n	8003ffa <_printf_common+0x8e>
	...

08004048 <_printf_i>:
 8004048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	7e0f      	ldrb	r7, [r1, #24]
 800404e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004050:	2f78      	cmp	r7, #120	@ 0x78
 8004052:	4691      	mov	r9, r2
 8004054:	4680      	mov	r8, r0
 8004056:	460c      	mov	r4, r1
 8004058:	469a      	mov	sl, r3
 800405a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800405e:	d807      	bhi.n	8004070 <_printf_i+0x28>
 8004060:	2f62      	cmp	r7, #98	@ 0x62
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x32>
 8004064:	2f00      	cmp	r7, #0
 8004066:	f000 80d1 	beq.w	800420c <_printf_i+0x1c4>
 800406a:	2f58      	cmp	r7, #88	@ 0x58
 800406c:	f000 80b8 	beq.w	80041e0 <_printf_i+0x198>
 8004070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004078:	e03a      	b.n	80040f0 <_printf_i+0xa8>
 800407a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800407e:	2b15      	cmp	r3, #21
 8004080:	d8f6      	bhi.n	8004070 <_printf_i+0x28>
 8004082:	a101      	add	r1, pc, #4	@ (adr r1, 8004088 <_printf_i+0x40>)
 8004084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004071 	.word	0x08004071
 8004094:	08004071 	.word	0x08004071
 8004098:	08004071 	.word	0x08004071
 800409c:	08004071 	.word	0x08004071
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004071 	.word	0x08004071
 80040a8:	08004071 	.word	0x08004071
 80040ac:	08004071 	.word	0x08004071
 80040b0:	08004071 	.word	0x08004071
 80040b4:	080041f3 	.word	0x080041f3
 80040b8:	0800411f 	.word	0x0800411f
 80040bc:	080041ad 	.word	0x080041ad
 80040c0:	08004071 	.word	0x08004071
 80040c4:	08004071 	.word	0x08004071
 80040c8:	08004215 	.word	0x08004215
 80040cc:	08004071 	.word	0x08004071
 80040d0:	0800411f 	.word	0x0800411f
 80040d4:	08004071 	.word	0x08004071
 80040d8:	08004071 	.word	0x08004071
 80040dc:	080041b5 	.word	0x080041b5
 80040e0:	6833      	ldr	r3, [r6, #0]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6032      	str	r2, [r6, #0]
 80040e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e09c      	b.n	800422e <_printf_i+0x1e6>
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	1d19      	adds	r1, r3, #4
 80040fa:	6031      	str	r1, [r6, #0]
 80040fc:	0606      	lsls	r6, r0, #24
 80040fe:	d501      	bpl.n	8004104 <_printf_i+0xbc>
 8004100:	681d      	ldr	r5, [r3, #0]
 8004102:	e003      	b.n	800410c <_printf_i+0xc4>
 8004104:	0645      	lsls	r5, r0, #25
 8004106:	d5fb      	bpl.n	8004100 <_printf_i+0xb8>
 8004108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800410c:	2d00      	cmp	r5, #0
 800410e:	da03      	bge.n	8004118 <_printf_i+0xd0>
 8004110:	232d      	movs	r3, #45	@ 0x2d
 8004112:	426d      	negs	r5, r5
 8004114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004118:	4858      	ldr	r0, [pc, #352]	@ (800427c <_printf_i+0x234>)
 800411a:	230a      	movs	r3, #10
 800411c:	e011      	b.n	8004142 <_printf_i+0xfa>
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	6833      	ldr	r3, [r6, #0]
 8004122:	0608      	lsls	r0, r1, #24
 8004124:	f853 5b04 	ldr.w	r5, [r3], #4
 8004128:	d402      	bmi.n	8004130 <_printf_i+0xe8>
 800412a:	0649      	lsls	r1, r1, #25
 800412c:	bf48      	it	mi
 800412e:	b2ad      	uxthmi	r5, r5
 8004130:	2f6f      	cmp	r7, #111	@ 0x6f
 8004132:	4852      	ldr	r0, [pc, #328]	@ (800427c <_printf_i+0x234>)
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	bf14      	ite	ne
 8004138:	230a      	movne	r3, #10
 800413a:	2308      	moveq	r3, #8
 800413c:	2100      	movs	r1, #0
 800413e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004142:	6866      	ldr	r6, [r4, #4]
 8004144:	60a6      	str	r6, [r4, #8]
 8004146:	2e00      	cmp	r6, #0
 8004148:	db05      	blt.n	8004156 <_printf_i+0x10e>
 800414a:	6821      	ldr	r1, [r4, #0]
 800414c:	432e      	orrs	r6, r5
 800414e:	f021 0104 	bic.w	r1, r1, #4
 8004152:	6021      	str	r1, [r4, #0]
 8004154:	d04b      	beq.n	80041ee <_printf_i+0x1a6>
 8004156:	4616      	mov	r6, r2
 8004158:	fbb5 f1f3 	udiv	r1, r5, r3
 800415c:	fb03 5711 	mls	r7, r3, r1, r5
 8004160:	5dc7      	ldrb	r7, [r0, r7]
 8004162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004166:	462f      	mov	r7, r5
 8004168:	42bb      	cmp	r3, r7
 800416a:	460d      	mov	r5, r1
 800416c:	d9f4      	bls.n	8004158 <_printf_i+0x110>
 800416e:	2b08      	cmp	r3, #8
 8004170:	d10b      	bne.n	800418a <_printf_i+0x142>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	07df      	lsls	r7, r3, #31
 8004176:	d508      	bpl.n	800418a <_printf_i+0x142>
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	6861      	ldr	r1, [r4, #4]
 800417c:	4299      	cmp	r1, r3
 800417e:	bfde      	ittt	le
 8004180:	2330      	movle	r3, #48	@ 0x30
 8004182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800418a:	1b92      	subs	r2, r2, r6
 800418c:	6122      	str	r2, [r4, #16]
 800418e:	f8cd a000 	str.w	sl, [sp]
 8004192:	464b      	mov	r3, r9
 8004194:	aa03      	add	r2, sp, #12
 8004196:	4621      	mov	r1, r4
 8004198:	4640      	mov	r0, r8
 800419a:	f7ff fee7 	bl	8003f6c <_printf_common>
 800419e:	3001      	adds	r0, #1
 80041a0:	d14a      	bne.n	8004238 <_printf_i+0x1f0>
 80041a2:	f04f 30ff 	mov.w	r0, #4294967295
 80041a6:	b004      	add	sp, #16
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	4832      	ldr	r0, [pc, #200]	@ (8004280 <_printf_i+0x238>)
 80041b6:	2778      	movs	r7, #120	@ 0x78
 80041b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	6831      	ldr	r1, [r6, #0]
 80041c0:	061f      	lsls	r7, r3, #24
 80041c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80041c6:	d402      	bmi.n	80041ce <_printf_i+0x186>
 80041c8:	065f      	lsls	r7, r3, #25
 80041ca:	bf48      	it	mi
 80041cc:	b2ad      	uxthmi	r5, r5
 80041ce:	6031      	str	r1, [r6, #0]
 80041d0:	07d9      	lsls	r1, r3, #31
 80041d2:	bf44      	itt	mi
 80041d4:	f043 0320 	orrmi.w	r3, r3, #32
 80041d8:	6023      	strmi	r3, [r4, #0]
 80041da:	b11d      	cbz	r5, 80041e4 <_printf_i+0x19c>
 80041dc:	2310      	movs	r3, #16
 80041de:	e7ad      	b.n	800413c <_printf_i+0xf4>
 80041e0:	4826      	ldr	r0, [pc, #152]	@ (800427c <_printf_i+0x234>)
 80041e2:	e7e9      	b.n	80041b8 <_printf_i+0x170>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f023 0320 	bic.w	r3, r3, #32
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	e7f6      	b.n	80041dc <_printf_i+0x194>
 80041ee:	4616      	mov	r6, r2
 80041f0:	e7bd      	b.n	800416e <_printf_i+0x126>
 80041f2:	6833      	ldr	r3, [r6, #0]
 80041f4:	6825      	ldr	r5, [r4, #0]
 80041f6:	6961      	ldr	r1, [r4, #20]
 80041f8:	1d18      	adds	r0, r3, #4
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	062e      	lsls	r6, r5, #24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	d501      	bpl.n	8004206 <_printf_i+0x1be>
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	e002      	b.n	800420c <_printf_i+0x1c4>
 8004206:	0668      	lsls	r0, r5, #25
 8004208:	d5fb      	bpl.n	8004202 <_printf_i+0x1ba>
 800420a:	8019      	strh	r1, [r3, #0]
 800420c:	2300      	movs	r3, #0
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	4616      	mov	r6, r2
 8004212:	e7bc      	b.n	800418e <_printf_i+0x146>
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	6032      	str	r2, [r6, #0]
 800421a:	681e      	ldr	r6, [r3, #0]
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	2100      	movs	r1, #0
 8004220:	4630      	mov	r0, r6
 8004222:	f7fb ffdd 	bl	80001e0 <memchr>
 8004226:	b108      	cbz	r0, 800422c <_printf_i+0x1e4>
 8004228:	1b80      	subs	r0, r0, r6
 800422a:	6060      	str	r0, [r4, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	6123      	str	r3, [r4, #16]
 8004230:	2300      	movs	r3, #0
 8004232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004236:	e7aa      	b.n	800418e <_printf_i+0x146>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	4632      	mov	r2, r6
 800423c:	4649      	mov	r1, r9
 800423e:	4640      	mov	r0, r8
 8004240:	47d0      	blx	sl
 8004242:	3001      	adds	r0, #1
 8004244:	d0ad      	beq.n	80041a2 <_printf_i+0x15a>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	079b      	lsls	r3, r3, #30
 800424a:	d413      	bmi.n	8004274 <_printf_i+0x22c>
 800424c:	68e0      	ldr	r0, [r4, #12]
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	4298      	cmp	r0, r3
 8004252:	bfb8      	it	lt
 8004254:	4618      	movlt	r0, r3
 8004256:	e7a6      	b.n	80041a6 <_printf_i+0x15e>
 8004258:	2301      	movs	r3, #1
 800425a:	4632      	mov	r2, r6
 800425c:	4649      	mov	r1, r9
 800425e:	4640      	mov	r0, r8
 8004260:	47d0      	blx	sl
 8004262:	3001      	adds	r0, #1
 8004264:	d09d      	beq.n	80041a2 <_printf_i+0x15a>
 8004266:	3501      	adds	r5, #1
 8004268:	68e3      	ldr	r3, [r4, #12]
 800426a:	9903      	ldr	r1, [sp, #12]
 800426c:	1a5b      	subs	r3, r3, r1
 800426e:	42ab      	cmp	r3, r5
 8004270:	dcf2      	bgt.n	8004258 <_printf_i+0x210>
 8004272:	e7eb      	b.n	800424c <_printf_i+0x204>
 8004274:	2500      	movs	r5, #0
 8004276:	f104 0619 	add.w	r6, r4, #25
 800427a:	e7f5      	b.n	8004268 <_printf_i+0x220>
 800427c:	08004e05 	.word	0x08004e05
 8004280:	08004e16 	.word	0x08004e16

08004284 <memmove>:
 8004284:	4288      	cmp	r0, r1
 8004286:	b510      	push	{r4, lr}
 8004288:	eb01 0402 	add.w	r4, r1, r2
 800428c:	d902      	bls.n	8004294 <memmove+0x10>
 800428e:	4284      	cmp	r4, r0
 8004290:	4623      	mov	r3, r4
 8004292:	d807      	bhi.n	80042a4 <memmove+0x20>
 8004294:	1e43      	subs	r3, r0, #1
 8004296:	42a1      	cmp	r1, r4
 8004298:	d008      	beq.n	80042ac <memmove+0x28>
 800429a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800429e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042a2:	e7f8      	b.n	8004296 <memmove+0x12>
 80042a4:	4402      	add	r2, r0
 80042a6:	4601      	mov	r1, r0
 80042a8:	428a      	cmp	r2, r1
 80042aa:	d100      	bne.n	80042ae <memmove+0x2a>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042b6:	e7f7      	b.n	80042a8 <memmove+0x24>

080042b8 <_sbrk_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d06      	ldr	r5, [pc, #24]	@ (80042d4 <_sbrk_r+0x1c>)
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	f7fc fd5a 	bl	8000d7c <_sbrk>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d102      	bne.n	80042d2 <_sbrk_r+0x1a>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b103      	cbz	r3, 80042d2 <_sbrk_r+0x1a>
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	20000330 	.word	0x20000330

080042d8 <memcpy>:
 80042d8:	440a      	add	r2, r1
 80042da:	4291      	cmp	r1, r2
 80042dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e0:	d100      	bne.n	80042e4 <memcpy+0xc>
 80042e2:	4770      	bx	lr
 80042e4:	b510      	push	{r4, lr}
 80042e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d1f9      	bne.n	80042e6 <memcpy+0xe>
 80042f2:	bd10      	pop	{r4, pc}

080042f4 <_realloc_r>:
 80042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f8:	4607      	mov	r7, r0
 80042fa:	4614      	mov	r4, r2
 80042fc:	460d      	mov	r5, r1
 80042fe:	b921      	cbnz	r1, 800430a <_realloc_r+0x16>
 8004300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004304:	4611      	mov	r1, r2
 8004306:	f7ff bc4d 	b.w	8003ba4 <_malloc_r>
 800430a:	b92a      	cbnz	r2, 8004318 <_realloc_r+0x24>
 800430c:	f7ff fbde 	bl	8003acc <_free_r>
 8004310:	4625      	mov	r5, r4
 8004312:	4628      	mov	r0, r5
 8004314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004318:	f000 f81a 	bl	8004350 <_malloc_usable_size_r>
 800431c:	4284      	cmp	r4, r0
 800431e:	4606      	mov	r6, r0
 8004320:	d802      	bhi.n	8004328 <_realloc_r+0x34>
 8004322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004326:	d8f4      	bhi.n	8004312 <_realloc_r+0x1e>
 8004328:	4621      	mov	r1, r4
 800432a:	4638      	mov	r0, r7
 800432c:	f7ff fc3a 	bl	8003ba4 <_malloc_r>
 8004330:	4680      	mov	r8, r0
 8004332:	b908      	cbnz	r0, 8004338 <_realloc_r+0x44>
 8004334:	4645      	mov	r5, r8
 8004336:	e7ec      	b.n	8004312 <_realloc_r+0x1e>
 8004338:	42b4      	cmp	r4, r6
 800433a:	4622      	mov	r2, r4
 800433c:	4629      	mov	r1, r5
 800433e:	bf28      	it	cs
 8004340:	4632      	movcs	r2, r6
 8004342:	f7ff ffc9 	bl	80042d8 <memcpy>
 8004346:	4629      	mov	r1, r5
 8004348:	4638      	mov	r0, r7
 800434a:	f7ff fbbf 	bl	8003acc <_free_r>
 800434e:	e7f1      	b.n	8004334 <_realloc_r+0x40>

08004350 <_malloc_usable_size_r>:
 8004350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004354:	1f18      	subs	r0, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfbc      	itt	lt
 800435a:	580b      	ldrlt	r3, [r1, r0]
 800435c:	18c0      	addlt	r0, r0, r3
 800435e:	4770      	bx	lr

08004360 <sinf>:
 8004360:	ee10 3a10 	vmov	r3, s0
 8004364:	b507      	push	{r0, r1, r2, lr}
 8004366:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <sinf+0x84>)
 8004368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800436c:	4293      	cmp	r3, r2
 800436e:	d807      	bhi.n	8004380 <sinf+0x20>
 8004370:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80043e8 <sinf+0x88>
 8004374:	2000      	movs	r0, #0
 8004376:	b003      	add	sp, #12
 8004378:	f85d eb04 	ldr.w	lr, [sp], #4
 800437c:	f000 b88e 	b.w	800449c <__kernel_sinf>
 8004380:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004384:	d304      	bcc.n	8004390 <sinf+0x30>
 8004386:	ee30 0a40 	vsub.f32	s0, s0, s0
 800438a:	b003      	add	sp, #12
 800438c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004390:	4668      	mov	r0, sp
 8004392:	f000 f8cb 	bl	800452c <__ieee754_rem_pio2f>
 8004396:	f000 0003 	and.w	r0, r0, #3
 800439a:	2801      	cmp	r0, #1
 800439c:	d00a      	beq.n	80043b4 <sinf+0x54>
 800439e:	2802      	cmp	r0, #2
 80043a0:	d00f      	beq.n	80043c2 <sinf+0x62>
 80043a2:	b9c0      	cbnz	r0, 80043d6 <sinf+0x76>
 80043a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80043a8:	ed9d 0a00 	vldr	s0, [sp]
 80043ac:	2001      	movs	r0, #1
 80043ae:	f000 f875 	bl	800449c <__kernel_sinf>
 80043b2:	e7ea      	b.n	800438a <sinf+0x2a>
 80043b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80043b8:	ed9d 0a00 	vldr	s0, [sp]
 80043bc:	f000 f816 	bl	80043ec <__kernel_cosf>
 80043c0:	e7e3      	b.n	800438a <sinf+0x2a>
 80043c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80043c6:	ed9d 0a00 	vldr	s0, [sp]
 80043ca:	2001      	movs	r0, #1
 80043cc:	f000 f866 	bl	800449c <__kernel_sinf>
 80043d0:	eeb1 0a40 	vneg.f32	s0, s0
 80043d4:	e7d9      	b.n	800438a <sinf+0x2a>
 80043d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80043da:	ed9d 0a00 	vldr	s0, [sp]
 80043de:	f000 f805 	bl	80043ec <__kernel_cosf>
 80043e2:	e7f5      	b.n	80043d0 <sinf+0x70>
 80043e4:	3f490fd8 	.word	0x3f490fd8
 80043e8:	00000000 	.word	0x00000000

080043ec <__kernel_cosf>:
 80043ec:	ee10 3a10 	vmov	r3, s0
 80043f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80043f8:	eef0 6a40 	vmov.f32	s13, s0
 80043fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004400:	d204      	bcs.n	800440c <__kernel_cosf+0x20>
 8004402:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004406:	ee17 2a90 	vmov	r2, s15
 800440a:	b342      	cbz	r2, 800445e <__kernel_cosf+0x72>
 800440c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004410:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800447c <__kernel_cosf+0x90>
 8004414:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004480 <__kernel_cosf+0x94>
 8004418:	4a1a      	ldr	r2, [pc, #104]	@ (8004484 <__kernel_cosf+0x98>)
 800441a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800441e:	4293      	cmp	r3, r2
 8004420:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004488 <__kernel_cosf+0x9c>
 8004424:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004428:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800448c <__kernel_cosf+0xa0>
 800442c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004430:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004490 <__kernel_cosf+0xa4>
 8004434:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004438:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004494 <__kernel_cosf+0xa8>
 800443c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004440:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004444:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004448:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800444c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004454:	d804      	bhi.n	8004460 <__kernel_cosf+0x74>
 8004456:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800445a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800445e:	4770      	bx	lr
 8004460:	4a0d      	ldr	r2, [pc, #52]	@ (8004498 <__kernel_cosf+0xac>)
 8004462:	4293      	cmp	r3, r2
 8004464:	bf9a      	itte	ls
 8004466:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800446a:	ee07 3a10 	vmovls	s14, r3
 800446e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004472:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800447a:	e7ec      	b.n	8004456 <__kernel_cosf+0x6a>
 800447c:	ad47d74e 	.word	0xad47d74e
 8004480:	310f74f6 	.word	0x310f74f6
 8004484:	3e999999 	.word	0x3e999999
 8004488:	b493f27c 	.word	0xb493f27c
 800448c:	37d00d01 	.word	0x37d00d01
 8004490:	bab60b61 	.word	0xbab60b61
 8004494:	3d2aaaab 	.word	0x3d2aaaab
 8004498:	3f480000 	.word	0x3f480000

0800449c <__kernel_sinf>:
 800449c:	ee10 3a10 	vmov	r3, s0
 80044a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80044a8:	d204      	bcs.n	80044b4 <__kernel_sinf+0x18>
 80044aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80044ae:	ee17 3a90 	vmov	r3, s15
 80044b2:	b35b      	cbz	r3, 800450c <__kernel_sinf+0x70>
 80044b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80044b8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004510 <__kernel_sinf+0x74>
 80044bc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004514 <__kernel_sinf+0x78>
 80044c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80044c4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004518 <__kernel_sinf+0x7c>
 80044c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80044cc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800451c <__kernel_sinf+0x80>
 80044d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80044d4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004520 <__kernel_sinf+0x84>
 80044d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80044dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80044e0:	b930      	cbnz	r0, 80044f0 <__kernel_sinf+0x54>
 80044e2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004524 <__kernel_sinf+0x88>
 80044e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80044ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 80044ee:	4770      	bx	lr
 80044f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80044f4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80044f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80044fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004500:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004528 <__kernel_sinf+0x8c>
 8004504:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004508:	ee30 0a60 	vsub.f32	s0, s0, s1
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2f2ec9d3 	.word	0x2f2ec9d3
 8004514:	b2d72f34 	.word	0xb2d72f34
 8004518:	3638ef1b 	.word	0x3638ef1b
 800451c:	b9500d01 	.word	0xb9500d01
 8004520:	3c088889 	.word	0x3c088889
 8004524:	be2aaaab 	.word	0xbe2aaaab
 8004528:	3e2aaaab 	.word	0x3e2aaaab

0800452c <__ieee754_rem_pio2f>:
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452e:	ee10 6a10 	vmov	r6, s0
 8004532:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <__ieee754_rem_pio2f+0x228>)
 8004534:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004538:	429d      	cmp	r5, r3
 800453a:	b087      	sub	sp, #28
 800453c:	4604      	mov	r4, r0
 800453e:	d805      	bhi.n	800454c <__ieee754_rem_pio2f+0x20>
 8004540:	2300      	movs	r3, #0
 8004542:	ed80 0a00 	vstr	s0, [r0]
 8004546:	6043      	str	r3, [r0, #4]
 8004548:	2000      	movs	r0, #0
 800454a:	e022      	b.n	8004592 <__ieee754_rem_pio2f+0x66>
 800454c:	4b82      	ldr	r3, [pc, #520]	@ (8004758 <__ieee754_rem_pio2f+0x22c>)
 800454e:	429d      	cmp	r5, r3
 8004550:	d83a      	bhi.n	80045c8 <__ieee754_rem_pio2f+0x9c>
 8004552:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004556:	2e00      	cmp	r6, #0
 8004558:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800475c <__ieee754_rem_pio2f+0x230>
 800455c:	4a80      	ldr	r2, [pc, #512]	@ (8004760 <__ieee754_rem_pio2f+0x234>)
 800455e:	f023 030f 	bic.w	r3, r3, #15
 8004562:	dd18      	ble.n	8004596 <__ieee754_rem_pio2f+0x6a>
 8004564:	4293      	cmp	r3, r2
 8004566:	ee70 7a47 	vsub.f32	s15, s0, s14
 800456a:	bf09      	itett	eq
 800456c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004764 <__ieee754_rem_pio2f+0x238>
 8004570:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004768 <__ieee754_rem_pio2f+0x23c>
 8004574:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800476c <__ieee754_rem_pio2f+0x240>
 8004578:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800457c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004584:	ed80 7a00 	vstr	s14, [r0]
 8004588:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800458c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004590:	2001      	movs	r0, #1
 8004592:	b007      	add	sp, #28
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004596:	4293      	cmp	r3, r2
 8004598:	ee70 7a07 	vadd.f32	s15, s0, s14
 800459c:	bf09      	itett	eq
 800459e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004764 <__ieee754_rem_pio2f+0x238>
 80045a2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004768 <__ieee754_rem_pio2f+0x23c>
 80045a6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800476c <__ieee754_rem_pio2f+0x240>
 80045aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80045ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045b6:	ed80 7a00 	vstr	s14, [r0]
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	edc0 7a01 	vstr	s15, [r0, #4]
 80045c2:	f04f 30ff 	mov.w	r0, #4294967295
 80045c6:	e7e4      	b.n	8004592 <__ieee754_rem_pio2f+0x66>
 80045c8:	4b69      	ldr	r3, [pc, #420]	@ (8004770 <__ieee754_rem_pio2f+0x244>)
 80045ca:	429d      	cmp	r5, r3
 80045cc:	d873      	bhi.n	80046b6 <__ieee754_rem_pio2f+0x18a>
 80045ce:	f000 f8dd 	bl	800478c <fabsf>
 80045d2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004774 <__ieee754_rem_pio2f+0x248>
 80045d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80045da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80045de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045e6:	ee17 0a90 	vmov	r0, s15
 80045ea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800475c <__ieee754_rem_pio2f+0x230>
 80045ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80045f2:	281f      	cmp	r0, #31
 80045f4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004768 <__ieee754_rem_pio2f+0x23c>
 80045f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fc:	eeb1 6a47 	vneg.f32	s12, s14
 8004600:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004604:	ee16 1a90 	vmov	r1, s13
 8004608:	dc09      	bgt.n	800461e <__ieee754_rem_pio2f+0xf2>
 800460a:	4a5b      	ldr	r2, [pc, #364]	@ (8004778 <__ieee754_rem_pio2f+0x24c>)
 800460c:	1e47      	subs	r7, r0, #1
 800460e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004612:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800461a:	4293      	cmp	r3, r2
 800461c:	d107      	bne.n	800462e <__ieee754_rem_pio2f+0x102>
 800461e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004622:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8004626:	2a08      	cmp	r2, #8
 8004628:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800462c:	dc14      	bgt.n	8004658 <__ieee754_rem_pio2f+0x12c>
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	ed94 7a00 	vldr	s14, [r4]
 8004634:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004638:	2e00      	cmp	r6, #0
 800463a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800463e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004642:	daa6      	bge.n	8004592 <__ieee754_rem_pio2f+0x66>
 8004644:	eeb1 7a47 	vneg.f32	s14, s14
 8004648:	eeb1 0a40 	vneg.f32	s0, s0
 800464c:	ed84 7a00 	vstr	s14, [r4]
 8004650:	ed84 0a01 	vstr	s0, [r4, #4]
 8004654:	4240      	negs	r0, r0
 8004656:	e79c      	b.n	8004592 <__ieee754_rem_pio2f+0x66>
 8004658:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004764 <__ieee754_rem_pio2f+0x238>
 800465c:	eef0 6a40 	vmov.f32	s13, s0
 8004660:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004664:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004668:	eee6 7a25 	vfma.f32	s15, s12, s11
 800466c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800476c <__ieee754_rem_pio2f+0x240>
 8004670:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004674:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004678:	ee15 2a90 	vmov	r2, s11
 800467c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004680:	1a5b      	subs	r3, r3, r1
 8004682:	2b19      	cmp	r3, #25
 8004684:	dc04      	bgt.n	8004690 <__ieee754_rem_pio2f+0x164>
 8004686:	edc4 5a00 	vstr	s11, [r4]
 800468a:	eeb0 0a66 	vmov.f32	s0, s13
 800468e:	e7cf      	b.n	8004630 <__ieee754_rem_pio2f+0x104>
 8004690:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800477c <__ieee754_rem_pio2f+0x250>
 8004694:	eeb0 0a66 	vmov.f32	s0, s13
 8004698:	eea6 0a25 	vfma.f32	s0, s12, s11
 800469c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80046a0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004780 <__ieee754_rem_pio2f+0x254>
 80046a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80046a8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80046ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80046b0:	ed84 7a00 	vstr	s14, [r4]
 80046b4:	e7bc      	b.n	8004630 <__ieee754_rem_pio2f+0x104>
 80046b6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80046ba:	d306      	bcc.n	80046ca <__ieee754_rem_pio2f+0x19e>
 80046bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80046c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80046c4:	edc0 7a00 	vstr	s15, [r0]
 80046c8:	e73e      	b.n	8004548 <__ieee754_rem_pio2f+0x1c>
 80046ca:	15ea      	asrs	r2, r5, #23
 80046cc:	3a86      	subs	r2, #134	@ 0x86
 80046ce:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80046da:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004784 <__ieee754_rem_pio2f+0x258>
 80046de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80046ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80046ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80046f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80046fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	edcd 7a05 	vstr	s15, [sp, #20]
 800470e:	d11e      	bne.n	800474e <__ieee754_rem_pio2f+0x222>
 8004710:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2302      	movne	r3, #2
 800471e:	491a      	ldr	r1, [pc, #104]	@ (8004788 <__ieee754_rem_pio2f+0x25c>)
 8004720:	9101      	str	r1, [sp, #4]
 8004722:	2102      	movs	r1, #2
 8004724:	9100      	str	r1, [sp, #0]
 8004726:	a803      	add	r0, sp, #12
 8004728:	4621      	mov	r1, r4
 800472a:	f000 f837 	bl	800479c <__kernel_rem_pio2f>
 800472e:	2e00      	cmp	r6, #0
 8004730:	f6bf af2f 	bge.w	8004592 <__ieee754_rem_pio2f+0x66>
 8004734:	edd4 7a00 	vldr	s15, [r4]
 8004738:	eef1 7a67 	vneg.f32	s15, s15
 800473c:	edc4 7a00 	vstr	s15, [r4]
 8004740:	edd4 7a01 	vldr	s15, [r4, #4]
 8004744:	eef1 7a67 	vneg.f32	s15, s15
 8004748:	edc4 7a01 	vstr	s15, [r4, #4]
 800474c:	e782      	b.n	8004654 <__ieee754_rem_pio2f+0x128>
 800474e:	2303      	movs	r3, #3
 8004750:	e7e5      	b.n	800471e <__ieee754_rem_pio2f+0x1f2>
 8004752:	bf00      	nop
 8004754:	3f490fd8 	.word	0x3f490fd8
 8004758:	4016cbe3 	.word	0x4016cbe3
 800475c:	3fc90f80 	.word	0x3fc90f80
 8004760:	3fc90fd0 	.word	0x3fc90fd0
 8004764:	37354400 	.word	0x37354400
 8004768:	37354443 	.word	0x37354443
 800476c:	2e85a308 	.word	0x2e85a308
 8004770:	43490f80 	.word	0x43490f80
 8004774:	3f22f984 	.word	0x3f22f984
 8004778:	08004e28 	.word	0x08004e28
 800477c:	2e85a300 	.word	0x2e85a300
 8004780:	248d3132 	.word	0x248d3132
 8004784:	43800000 	.word	0x43800000
 8004788:	08004ea8 	.word	0x08004ea8

0800478c <fabsf>:
 800478c:	ee10 3a10 	vmov	r3, s0
 8004790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004794:	ee00 3a10 	vmov	s0, r3
 8004798:	4770      	bx	lr
	...

0800479c <__kernel_rem_pio2f>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	ed2d 8b04 	vpush	{d8-d9}
 80047a4:	b0d9      	sub	sp, #356	@ 0x164
 80047a6:	4690      	mov	r8, r2
 80047a8:	9001      	str	r0, [sp, #4]
 80047aa:	4ab6      	ldr	r2, [pc, #728]	@ (8004a84 <__kernel_rem_pio2f+0x2e8>)
 80047ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80047ae:	f118 0f04 	cmn.w	r8, #4
 80047b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80047b6:	460f      	mov	r7, r1
 80047b8:	f103 3bff 	add.w	fp, r3, #4294967295
 80047bc:	db26      	blt.n	800480c <__kernel_rem_pio2f+0x70>
 80047be:	f1b8 0203 	subs.w	r2, r8, #3
 80047c2:	bf48      	it	mi
 80047c4:	f108 0204 	addmi.w	r2, r8, #4
 80047c8:	10d2      	asrs	r2, r2, #3
 80047ca:	1c55      	adds	r5, r2, #1
 80047cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80047ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 80047d2:	00e8      	lsls	r0, r5, #3
 80047d4:	eba2 060b 	sub.w	r6, r2, fp
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80047de:	eb0a 0c0b 	add.w	ip, sl, fp
 80047e2:	ac1c      	add	r4, sp, #112	@ 0x70
 80047e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80047e8:	2000      	movs	r0, #0
 80047ea:	4560      	cmp	r0, ip
 80047ec:	dd10      	ble.n	8004810 <__kernel_rem_pio2f+0x74>
 80047ee:	a91c      	add	r1, sp, #112	@ 0x70
 80047f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80047f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80047f8:	2600      	movs	r6, #0
 80047fa:	4556      	cmp	r6, sl
 80047fc:	dc24      	bgt.n	8004848 <__kernel_rem_pio2f+0xac>
 80047fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004802:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 8004806:	4684      	mov	ip, r0
 8004808:	2400      	movs	r4, #0
 800480a:	e016      	b.n	800483a <__kernel_rem_pio2f+0x9e>
 800480c:	2200      	movs	r2, #0
 800480e:	e7dc      	b.n	80047ca <__kernel_rem_pio2f+0x2e>
 8004810:	42c6      	cmn	r6, r0
 8004812:	bf5d      	ittte	pl
 8004814:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004818:	ee07 1a90 	vmovpl	s15, r1
 800481c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004820:	eef0 7a47 	vmovmi.f32	s15, s14
 8004824:	ece4 7a01 	vstmia	r4!, {s15}
 8004828:	3001      	adds	r0, #1
 800482a:	e7de      	b.n	80047ea <__kernel_rem_pio2f+0x4e>
 800482c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004830:	ed3c 7a01 	vldmdb	ip!, {s14}
 8004834:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004838:	3401      	adds	r4, #1
 800483a:	455c      	cmp	r4, fp
 800483c:	ddf6      	ble.n	800482c <__kernel_rem_pio2f+0x90>
 800483e:	ece9 7a01 	vstmia	r9!, {s15}
 8004842:	3601      	adds	r6, #1
 8004844:	3004      	adds	r0, #4
 8004846:	e7d8      	b.n	80047fa <__kernel_rem_pio2f+0x5e>
 8004848:	a908      	add	r1, sp, #32
 800484a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800484e:	9104      	str	r1, [sp, #16]
 8004850:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004852:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004a90 <__kernel_rem_pio2f+0x2f4>
 8004856:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8004a8c <__kernel_rem_pio2f+0x2f0>
 800485a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	4654      	mov	r4, sl
 8004862:	00a2      	lsls	r2, r4, #2
 8004864:	9205      	str	r2, [sp, #20]
 8004866:	aa58      	add	r2, sp, #352	@ 0x160
 8004868:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800486c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004870:	a944      	add	r1, sp, #272	@ 0x110
 8004872:	aa08      	add	r2, sp, #32
 8004874:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004878:	4694      	mov	ip, r2
 800487a:	4626      	mov	r6, r4
 800487c:	2e00      	cmp	r6, #0
 800487e:	dc4c      	bgt.n	800491a <__kernel_rem_pio2f+0x17e>
 8004880:	4628      	mov	r0, r5
 8004882:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004886:	f000 f9f1 	bl	8004c6c <scalbnf>
 800488a:	eeb0 8a40 	vmov.f32	s16, s0
 800488e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004892:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004896:	f000 fa4f 	bl	8004d38 <floorf>
 800489a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800489e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80048ac:	ee17 9a90 	vmov	r9, s15
 80048b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80048b8:	dd41      	ble.n	800493e <__kernel_rem_pio2f+0x1a2>
 80048ba:	f104 3cff 	add.w	ip, r4, #4294967295
 80048be:	a908      	add	r1, sp, #32
 80048c0:	f1c5 0e08 	rsb	lr, r5, #8
 80048c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80048c8:	fa46 f00e 	asr.w	r0, r6, lr
 80048cc:	4481      	add	r9, r0
 80048ce:	fa00 f00e 	lsl.w	r0, r0, lr
 80048d2:	1a36      	subs	r6, r6, r0
 80048d4:	f1c5 0007 	rsb	r0, r5, #7
 80048d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80048dc:	4106      	asrs	r6, r0
 80048de:	2e00      	cmp	r6, #0
 80048e0:	dd3c      	ble.n	800495c <__kernel_rem_pio2f+0x1c0>
 80048e2:	f04f 0e00 	mov.w	lr, #0
 80048e6:	f109 0901 	add.w	r9, r9, #1
 80048ea:	4670      	mov	r0, lr
 80048ec:	4574      	cmp	r4, lr
 80048ee:	dc68      	bgt.n	80049c2 <__kernel_rem_pio2f+0x226>
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	dd03      	ble.n	80048fc <__kernel_rem_pio2f+0x160>
 80048f4:	2d01      	cmp	r5, #1
 80048f6:	d074      	beq.n	80049e2 <__kernel_rem_pio2f+0x246>
 80048f8:	2d02      	cmp	r5, #2
 80048fa:	d07d      	beq.n	80049f8 <__kernel_rem_pio2f+0x25c>
 80048fc:	2e02      	cmp	r6, #2
 80048fe:	d12d      	bne.n	800495c <__kernel_rem_pio2f+0x1c0>
 8004900:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004904:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004908:	b340      	cbz	r0, 800495c <__kernel_rem_pio2f+0x1c0>
 800490a:	4628      	mov	r0, r5
 800490c:	9306      	str	r3, [sp, #24]
 800490e:	f000 f9ad 	bl	8004c6c <scalbnf>
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004918:	e020      	b.n	800495c <__kernel_rem_pio2f+0x1c0>
 800491a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800491e:	3e01      	subs	r6, #1
 8004920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004928:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800492c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004930:	ecac 0a01 	vstmia	ip!, {s0}
 8004934:	ed30 0a01 	vldmdb	r0!, {s0}
 8004938:	ee37 0a80 	vadd.f32	s0, s15, s0
 800493c:	e79e      	b.n	800487c <__kernel_rem_pio2f+0xe0>
 800493e:	d105      	bne.n	800494c <__kernel_rem_pio2f+0x1b0>
 8004940:	1e60      	subs	r0, r4, #1
 8004942:	a908      	add	r1, sp, #32
 8004944:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004948:	11f6      	asrs	r6, r6, #7
 800494a:	e7c8      	b.n	80048de <__kernel_rem_pio2f+0x142>
 800494c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004950:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	da31      	bge.n	80049be <__kernel_rem_pio2f+0x222>
 800495a:	2600      	movs	r6, #0
 800495c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	f040 8098 	bne.w	8004a98 <__kernel_rem_pio2f+0x2fc>
 8004968:	1e60      	subs	r0, r4, #1
 800496a:	2200      	movs	r2, #0
 800496c:	4550      	cmp	r0, sl
 800496e:	da4b      	bge.n	8004a08 <__kernel_rem_pio2f+0x26c>
 8004970:	2a00      	cmp	r2, #0
 8004972:	d065      	beq.n	8004a40 <__kernel_rem_pio2f+0x2a4>
 8004974:	3c01      	subs	r4, #1
 8004976:	ab08      	add	r3, sp, #32
 8004978:	3d08      	subs	r5, #8
 800497a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f8      	beq.n	8004974 <__kernel_rem_pio2f+0x1d8>
 8004982:	4628      	mov	r0, r5
 8004984:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004988:	f000 f970 	bl	8004c6c <scalbnf>
 800498c:	1c63      	adds	r3, r4, #1
 800498e:	aa44      	add	r2, sp, #272	@ 0x110
 8004990:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004a90 <__kernel_rem_pio2f+0x2f4>
 8004994:	0099      	lsls	r1, r3, #2
 8004996:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800499a:	4623      	mov	r3, r4
 800499c:	2b00      	cmp	r3, #0
 800499e:	f280 80a9 	bge.w	8004af4 <__kernel_rem_pio2f+0x358>
 80049a2:	4623      	mov	r3, r4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f2c0 80c7 	blt.w	8004b38 <__kernel_rem_pio2f+0x39c>
 80049aa:	aa44      	add	r2, sp, #272	@ 0x110
 80049ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80049b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004a88 <__kernel_rem_pio2f+0x2ec>
 80049b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 80049b8:	2000      	movs	r0, #0
 80049ba:	1ae2      	subs	r2, r4, r3
 80049bc:	e0b1      	b.n	8004b22 <__kernel_rem_pio2f+0x386>
 80049be:	2602      	movs	r6, #2
 80049c0:	e78f      	b.n	80048e2 <__kernel_rem_pio2f+0x146>
 80049c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80049c6:	b948      	cbnz	r0, 80049dc <__kernel_rem_pio2f+0x240>
 80049c8:	b121      	cbz	r1, 80049d4 <__kernel_rem_pio2f+0x238>
 80049ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80049ce:	f842 1c04 	str.w	r1, [r2, #-4]
 80049d2:	2101      	movs	r1, #1
 80049d4:	f10e 0e01 	add.w	lr, lr, #1
 80049d8:	4608      	mov	r0, r1
 80049da:	e787      	b.n	80048ec <__kernel_rem_pio2f+0x150>
 80049dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80049e0:	e7f5      	b.n	80049ce <__kernel_rem_pio2f+0x232>
 80049e2:	f104 3cff 	add.w	ip, r4, #4294967295
 80049e6:	aa08      	add	r2, sp, #32
 80049e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80049ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049f0:	a908      	add	r1, sp, #32
 80049f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80049f6:	e781      	b.n	80048fc <__kernel_rem_pio2f+0x160>
 80049f8:	f104 3cff 	add.w	ip, r4, #4294967295
 80049fc:	aa08      	add	r2, sp, #32
 80049fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004a02:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004a06:	e7f3      	b.n	80049f0 <__kernel_rem_pio2f+0x254>
 8004a08:	a908      	add	r1, sp, #32
 8004a0a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004a0e:	3801      	subs	r0, #1
 8004a10:	430a      	orrs	r2, r1
 8004a12:	e7ab      	b.n	800496c <__kernel_rem_pio2f+0x1d0>
 8004a14:	3201      	adds	r2, #1
 8004a16:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d0fa      	beq.n	8004a14 <__kernel_rem_pio2f+0x278>
 8004a1e:	9905      	ldr	r1, [sp, #20]
 8004a20:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004a24:	eb0d 0001 	add.w	r0, sp, r1
 8004a28:	18e6      	adds	r6, r4, r3
 8004a2a:	a91c      	add	r1, sp, #112	@ 0x70
 8004a2c:	f104 0c01 	add.w	ip, r4, #1
 8004a30:	384c      	subs	r0, #76	@ 0x4c
 8004a32:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004a36:	4422      	add	r2, r4
 8004a38:	4562      	cmp	r2, ip
 8004a3a:	da04      	bge.n	8004a46 <__kernel_rem_pio2f+0x2aa>
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	e710      	b.n	8004862 <__kernel_rem_pio2f+0xc6>
 8004a40:	9804      	ldr	r0, [sp, #16]
 8004a42:	2201      	movs	r2, #1
 8004a44:	e7e7      	b.n	8004a16 <__kernel_rem_pio2f+0x27a>
 8004a46:	9903      	ldr	r1, [sp, #12]
 8004a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004a4c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004a50:	9105      	str	r1, [sp, #20]
 8004a52:	ee07 1a90 	vmov	s15, r1
 8004a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5a:	2400      	movs	r4, #0
 8004a5c:	ece6 7a01 	vstmia	r6!, {s15}
 8004a60:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 8004a64:	46b1      	mov	r9, r6
 8004a66:	455c      	cmp	r4, fp
 8004a68:	dd04      	ble.n	8004a74 <__kernel_rem_pio2f+0x2d8>
 8004a6a:	ece0 7a01 	vstmia	r0!, {s15}
 8004a6e:	f10c 0c01 	add.w	ip, ip, #1
 8004a72:	e7e1      	b.n	8004a38 <__kernel_rem_pio2f+0x29c>
 8004a74:	ecfe 6a01 	vldmia	lr!, {s13}
 8004a78:	ed39 7a01 	vldmdb	r9!, {s14}
 8004a7c:	3401      	adds	r4, #1
 8004a7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004a82:	e7f0      	b.n	8004a66 <__kernel_rem_pio2f+0x2ca>
 8004a84:	080051ec 	.word	0x080051ec
 8004a88:	080051c0 	.word	0x080051c0
 8004a8c:	43800000 	.word	0x43800000
 8004a90:	3b800000 	.word	0x3b800000
 8004a94:	00000000 	.word	0x00000000
 8004a98:	9b02      	ldr	r3, [sp, #8]
 8004a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8004a9e:	eba3 0008 	sub.w	r0, r3, r8
 8004aa2:	f000 f8e3 	bl	8004c6c <scalbnf>
 8004aa6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004a8c <__kernel_rem_pio2f+0x2f0>
 8004aaa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	db19      	blt.n	8004ae8 <__kernel_rem_pio2f+0x34c>
 8004ab4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004a90 <__kernel_rem_pio2f+0x2f4>
 8004ab8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004abc:	aa08      	add	r2, sp, #32
 8004abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ac2:	3508      	adds	r5, #8
 8004ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ad4:	ee10 3a10 	vmov	r3, s0
 8004ad8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004adc:	ee17 3a90 	vmov	r3, s15
 8004ae0:	3401      	adds	r4, #1
 8004ae2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004ae6:	e74c      	b.n	8004982 <__kernel_rem_pio2f+0x1e6>
 8004ae8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004aec:	aa08      	add	r2, sp, #32
 8004aee:	ee10 3a10 	vmov	r3, s0
 8004af2:	e7f6      	b.n	8004ae2 <__kernel_rem_pio2f+0x346>
 8004af4:	a808      	add	r0, sp, #32
 8004af6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004afa:	9001      	str	r0, [sp, #4]
 8004afc:	ee07 0a90 	vmov	s15, r0
 8004b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b04:	3b01      	subs	r3, #1
 8004b06:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b0e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b12:	e743      	b.n	800499c <__kernel_rem_pio2f+0x200>
 8004b14:	ecfc 6a01 	vldmia	ip!, {s13}
 8004b18:	ecb5 7a01 	vldmia	r5!, {s14}
 8004b1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b20:	3001      	adds	r0, #1
 8004b22:	4550      	cmp	r0, sl
 8004b24:	dc01      	bgt.n	8004b2a <__kernel_rem_pio2f+0x38e>
 8004b26:	4290      	cmp	r0, r2
 8004b28:	ddf4      	ble.n	8004b14 <__kernel_rem_pio2f+0x378>
 8004b2a:	a858      	add	r0, sp, #352	@ 0x160
 8004b2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b30:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004b34:	3b01      	subs	r3, #1
 8004b36:	e735      	b.n	80049a4 <__kernel_rem_pio2f+0x208>
 8004b38:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	dc09      	bgt.n	8004b52 <__kernel_rem_pio2f+0x3b6>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dc27      	bgt.n	8004b92 <__kernel_rem_pio2f+0x3f6>
 8004b42:	d040      	beq.n	8004bc6 <__kernel_rem_pio2f+0x42a>
 8004b44:	f009 0007 	and.w	r0, r9, #7
 8004b48:	b059      	add	sp, #356	@ 0x164
 8004b4a:	ecbd 8b04 	vpop	{d8-d9}
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d1f5      	bne.n	8004b44 <__kernel_rem_pio2f+0x3a8>
 8004b58:	aa30      	add	r2, sp, #192	@ 0xc0
 8004b5a:	1f0b      	subs	r3, r1, #4
 8004b5c:	4413      	add	r3, r2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4620      	mov	r0, r4
 8004b62:	2800      	cmp	r0, #0
 8004b64:	dc50      	bgt.n	8004c08 <__kernel_rem_pio2f+0x46c>
 8004b66:	4622      	mov	r2, r4
 8004b68:	2a01      	cmp	r2, #1
 8004b6a:	dc5d      	bgt.n	8004c28 <__kernel_rem_pio2f+0x48c>
 8004b6c:	ab30      	add	r3, sp, #192	@ 0xc0
 8004b6e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 8004b72:	440b      	add	r3, r1
 8004b74:	2c01      	cmp	r4, #1
 8004b76:	dc67      	bgt.n	8004c48 <__kernel_rem_pio2f+0x4ac>
 8004b78:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004b7c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	d167      	bne.n	8004c54 <__kernel_rem_pio2f+0x4b8>
 8004b84:	edc7 6a00 	vstr	s13, [r7]
 8004b88:	ed87 7a01 	vstr	s14, [r7, #4]
 8004b8c:	edc7 7a02 	vstr	s15, [r7, #8]
 8004b90:	e7d8      	b.n	8004b44 <__kernel_rem_pio2f+0x3a8>
 8004b92:	ab30      	add	r3, sp, #192	@ 0xc0
 8004b94:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 8004b98:	440b      	add	r3, r1
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	da24      	bge.n	8004bea <__kernel_rem_pio2f+0x44e>
 8004ba0:	b34e      	cbz	r6, 8004bf6 <__kernel_rem_pio2f+0x45a>
 8004ba2:	eef1 7a47 	vneg.f32	s15, s14
 8004ba6:	edc7 7a00 	vstr	s15, [r7]
 8004baa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bb2:	aa31      	add	r2, sp, #196	@ 0xc4
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	da20      	bge.n	8004bfc <__kernel_rem_pio2f+0x460>
 8004bba:	b10e      	cbz	r6, 8004bc0 <__kernel_rem_pio2f+0x424>
 8004bbc:	eef1 7a67 	vneg.f32	s15, s15
 8004bc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8004bc4:	e7be      	b.n	8004b44 <__kernel_rem_pio2f+0x3a8>
 8004bc6:	ab30      	add	r3, sp, #192	@ 0xc0
 8004bc8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8004a94 <__kernel_rem_pio2f+0x2f8>
 8004bcc:	440b      	add	r3, r1
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	da05      	bge.n	8004bde <__kernel_rem_pio2f+0x442>
 8004bd2:	b10e      	cbz	r6, 8004bd8 <__kernel_rem_pio2f+0x43c>
 8004bd4:	eef1 7a67 	vneg.f32	s15, s15
 8004bd8:	edc7 7a00 	vstr	s15, [r7]
 8004bdc:	e7b2      	b.n	8004b44 <__kernel_rem_pio2f+0x3a8>
 8004bde:	ed33 7a01 	vldmdb	r3!, {s14}
 8004be2:	3c01      	subs	r4, #1
 8004be4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be8:	e7f1      	b.n	8004bce <__kernel_rem_pio2f+0x432>
 8004bea:	ed73 7a01 	vldmdb	r3!, {s15}
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf4:	e7d2      	b.n	8004b9c <__kernel_rem_pio2f+0x400>
 8004bf6:	eef0 7a47 	vmov.f32	s15, s14
 8004bfa:	e7d4      	b.n	8004ba6 <__kernel_rem_pio2f+0x40a>
 8004bfc:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c00:	3301      	adds	r3, #1
 8004c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c06:	e7d6      	b.n	8004bb6 <__kernel_rem_pio2f+0x41a>
 8004c08:	ed72 7a01 	vldmdb	r2!, {s15}
 8004c0c:	edd2 6a01 	vldr	s13, [r2, #4]
 8004c10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c14:	3801      	subs	r0, #1
 8004c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c1a:	ed82 7a00 	vstr	s14, [r2]
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	edc2 7a01 	vstr	s15, [r2, #4]
 8004c26:	e79c      	b.n	8004b62 <__kernel_rem_pio2f+0x3c6>
 8004c28:	ed73 7a01 	vldmdb	r3!, {s15}
 8004c2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c34:	3a01      	subs	r2, #1
 8004c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c3a:	ed83 7a00 	vstr	s14, [r3]
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c46:	e78f      	b.n	8004b68 <__kernel_rem_pio2f+0x3cc>
 8004c48:	ed33 7a01 	vldmdb	r3!, {s14}
 8004c4c:	3c01      	subs	r4, #1
 8004c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c52:	e78f      	b.n	8004b74 <__kernel_rem_pio2f+0x3d8>
 8004c54:	eef1 6a66 	vneg.f32	s13, s13
 8004c58:	eeb1 7a47 	vneg.f32	s14, s14
 8004c5c:	edc7 6a00 	vstr	s13, [r7]
 8004c60:	ed87 7a01 	vstr	s14, [r7, #4]
 8004c64:	eef1 7a67 	vneg.f32	s15, s15
 8004c68:	e790      	b.n	8004b8c <__kernel_rem_pio2f+0x3f0>
 8004c6a:	bf00      	nop

08004c6c <scalbnf>:
 8004c6c:	ee10 3a10 	vmov	r3, s0
 8004c70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004c74:	d02b      	beq.n	8004cce <scalbnf+0x62>
 8004c76:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004c7a:	d302      	bcc.n	8004c82 <scalbnf+0x16>
 8004c7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004c80:	4770      	bx	lr
 8004c82:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004c86:	d123      	bne.n	8004cd0 <scalbnf+0x64>
 8004c88:	4b24      	ldr	r3, [pc, #144]	@ (8004d1c <scalbnf+0xb0>)
 8004c8a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004d20 <scalbnf+0xb4>
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004c94:	db17      	blt.n	8004cc6 <scalbnf+0x5a>
 8004c96:	ee10 3a10 	vmov	r3, s0
 8004c9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004c9e:	3a19      	subs	r2, #25
 8004ca0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004ca4:	4288      	cmp	r0, r1
 8004ca6:	dd15      	ble.n	8004cd4 <scalbnf+0x68>
 8004ca8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004d24 <scalbnf+0xb8>
 8004cac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004d28 <scalbnf+0xbc>
 8004cb0:	ee10 3a10 	vmov	r3, s0
 8004cb4:	eeb0 7a67 	vmov.f32	s14, s15
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bfb8      	it	lt
 8004cbc:	eef0 7a66 	vmovlt.f32	s15, s13
 8004cc0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004cc4:	4770      	bx	lr
 8004cc6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004d2c <scalbnf+0xc0>
 8004cca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004cce:	4770      	bx	lr
 8004cd0:	0dd2      	lsrs	r2, r2, #23
 8004cd2:	e7e5      	b.n	8004ca0 <scalbnf+0x34>
 8004cd4:	4410      	add	r0, r2
 8004cd6:	28fe      	cmp	r0, #254	@ 0xfe
 8004cd8:	dce6      	bgt.n	8004ca8 <scalbnf+0x3c>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	dd06      	ble.n	8004cec <scalbnf+0x80>
 8004cde:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004ce2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004ce6:	ee00 3a10 	vmov	s0, r3
 8004cea:	4770      	bx	lr
 8004cec:	f110 0f16 	cmn.w	r0, #22
 8004cf0:	da09      	bge.n	8004d06 <scalbnf+0x9a>
 8004cf2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004d2c <scalbnf+0xc0>
 8004cf6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004d30 <scalbnf+0xc4>
 8004cfa:	ee10 3a10 	vmov	r3, s0
 8004cfe:	eeb0 7a67 	vmov.f32	s14, s15
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	e7d9      	b.n	8004cba <scalbnf+0x4e>
 8004d06:	3019      	adds	r0, #25
 8004d08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004d0c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004d10:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004d34 <scalbnf+0xc8>
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	e7d7      	b.n	8004cca <scalbnf+0x5e>
 8004d1a:	bf00      	nop
 8004d1c:	ffff3cb0 	.word	0xffff3cb0
 8004d20:	4c000000 	.word	0x4c000000
 8004d24:	7149f2ca 	.word	0x7149f2ca
 8004d28:	f149f2ca 	.word	0xf149f2ca
 8004d2c:	0da24260 	.word	0x0da24260
 8004d30:	8da24260 	.word	0x8da24260
 8004d34:	33000000 	.word	0x33000000

08004d38 <floorf>:
 8004d38:	ee10 3a10 	vmov	r3, s0
 8004d3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d40:	3a7f      	subs	r2, #127	@ 0x7f
 8004d42:	2a16      	cmp	r2, #22
 8004d44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d48:	dc2b      	bgt.n	8004da2 <floorf+0x6a>
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	da12      	bge.n	8004d74 <floorf+0x3c>
 8004d4e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004db4 <floorf+0x7c>
 8004d52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5e:	dd06      	ble.n	8004d6e <floorf+0x36>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da24      	bge.n	8004dae <floorf+0x76>
 8004d64:	2900      	cmp	r1, #0
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <floorf+0x80>)
 8004d68:	bf08      	it	eq
 8004d6a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004d6e:	ee00 3a10 	vmov	s0, r3
 8004d72:	4770      	bx	lr
 8004d74:	4911      	ldr	r1, [pc, #68]	@ (8004dbc <floorf+0x84>)
 8004d76:	4111      	asrs	r1, r2
 8004d78:	420b      	tst	r3, r1
 8004d7a:	d0fa      	beq.n	8004d72 <floorf+0x3a>
 8004d7c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004db4 <floorf+0x7c>
 8004d80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	ddef      	ble.n	8004d6e <floorf+0x36>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbe      	ittt	lt
 8004d92:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004d96:	fa40 f202 	asrlt.w	r2, r0, r2
 8004d9a:	189b      	addlt	r3, r3, r2
 8004d9c:	ea23 0301 	bic.w	r3, r3, r1
 8004da0:	e7e5      	b.n	8004d6e <floorf+0x36>
 8004da2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004da6:	d3e4      	bcc.n	8004d72 <floorf+0x3a>
 8004da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dac:	4770      	bx	lr
 8004dae:	2300      	movs	r3, #0
 8004db0:	e7dd      	b.n	8004d6e <floorf+0x36>
 8004db2:	bf00      	nop
 8004db4:	7149f2ca 	.word	0x7149f2ca
 8004db8:	bf800000 	.word	0xbf800000
 8004dbc:	007fffff 	.word	0x007fffff

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
